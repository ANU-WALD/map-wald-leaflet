{"version":3,"sources":["ng://map-wald-leaflet/leaflet.service.ts","ng://map-wald-leaflet/leaflet-map.component.ts","ng://map-wald-leaflet/draw.component.ts","ng://map-wald-leaflet/geojson-layer.component.ts","ng://map-wald-leaflet/legend.component.ts","ng://map-wald-leaflet/map-control.component.ts","ng://map-wald-leaflet/one-time-splash.component.ts","ng://map-wald-leaflet/vector-tile-layer.component.ts","ng://map-wald-leaflet/wms-layer.component.ts","ng://map-wald-leaflet/date-element.component.ts","ng://map-wald-leaflet/date-selection.component.ts","ng://map-wald-leaflet/map-coordinates.component.ts","ng://map-wald-leaflet/data/index.ts","ng://map-wald-leaflet/index.ts","ng://map-wald-leaflet/map-wald-leaflet.ts"],"names":["LeafletService","_this","this","map","Promise","res","rej","resolve","reject","prototype","mapCreated","corners","_controlCorners","l","container","_controlContainer","createCorner","vSide","hSide","className","leaflet","DomUtil","create","addControlPlaceholders","withMap","fn","then","factory","ɵfac","exports","ensurePane","pane","zIndex","getPane","createPane","style","DEFAULT_BASE_MAP","LeafletMapComponent","element","svc","zoomControl","minZoom","maxZoom","pointSelection","pointSelected","core_1","styles","initialised","console","log","ngOnChanges","changes","Object","keys","length","updateMap","bounds","setBounds","ngOnInit","setTimeout","baseMap","baseLayer","setUrl","urlTemplate","createBaseLayer","addTo","bringToBack","createMap","options","maxNativeZoom","tileLayer","remove","theHost","nativeElement","querySelector","crs","CRS","EPSG3857","baseLayerArray","push","zoom","maxBounds","toBounds","center","latLng","scrollWheelZoom","layers","continuousWorld","noWrap","tap","on","evt","originalEvent","defaultPrevented","emit","latlng","fitBounds","i0","ɵɵdirectiveInject","ElementRef","i1","selectors","inputs","outputs","features","ɵɵNgOnChangesFeature","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵstyleMap","south","west","north","east","DrawComponent","featureClosed","keyHandler","event","key","drawnItems","clearLayers","polygon","removeHooks","m","initiateDrawing","deleteLastVertex","ngOnDestroy","removeControl","addControl","removeLayer","off","L","Draw","Event","DRAWSTART","CREATED","FeatureGroup","addLayer","DRAWVERTEX","layer","toGeoJSON","Polygon","_onTouch","Util","falseFn","repeatMode","addHooks","encapsulation","PointMode","STYLES","fillOpacity","weight","GeojsonLayerComponent","http","sublayers","pointMode","default","featureSelected","destroyed","vectorLayer","removeFrom","url","downloadLayer","currentValue","makeLayer","get","subscribe","data","f","assign","forEach","k","val","getStyleValue","circle","pointToLayer","feature","radius","circleMarker","leaflet_service_1","geoJSON","selectedFeature","resetStyle","setStyle","HttpClient","i2","ɵɵelement","ɵɵproperty","ctx_r1","helpText","ɵɵsanitizeHtml","ctx_r2","mapUnits","_r0","ctx_r3","tooltipPlacement","ɵɵadvance","ctx_r8","markerClasses","i_r10","ɵɵpureFunction1","colour_r9","labels","ɵɵtemplate","LegendComponent_div_7_div_2_Template","ctx_r4","colours","ctx_r5","imageURL","ɵɵsanitizeUrl","ɵɵtext","ctx_r6","attributionLink","ɵɵtextInterpolate","attribution","ɵɵtextInterpolate1","ctx_r7","LegendComponent","title","generatedLabels","LegendComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","LegendComponent_span_5_Template","LegendComponent_span_6_Template","LegendComponent_div_7_Template","LegendComponent_div_8_Template","LegendComponent_p_9_Template","LegendComponent_p_10_Template","makeColour","r","g","b","a","undefined","TAG_WHITE_LIST","MapControlComponent","_el","_map","position","touchDevice","ngAfterViewInit","content","nodeName","controlDiv","document","createElement","appendChild","CustomControl","Control","extend","onAdd","onRemove","opts","replace","toLowerCase","ontouchstart","ev","indexOf","target","tagName","stopPropagation","enableMapEvents","disableMapEvents","dragging","disable","_handlers","h","enable","viewQuery","ɵɵlistener","$event","ɵɵrestoreView","_r8","d_r3","ɵɵnextContext","dismiss","label","_r10","doNotShow","doNotShowClicked","hideMessage","OneTimeSplashComponent_ng_template_0_div_0_Template","OneTimeSplashComponent_ng_template_0_label_4_Template","c_r2","close","application","SplashCloseMode","OneTimeSplashComponent","modalService","showOnLaunch","closed","storageKey","store","defaultShow","NotOpened","show","current","open","splashTemplate","size","windowClass","klass","Accepted","set","NgbModal","OneTimeSplashComponent_ng_template_0_Template","VectorTileLayerComponent","minNativeZoom","getFeatureId","match","find","v","properties","keyField","vectorGrid","protobuf","interactive","vectorTileLayerStyles","resetFeatureStyle","setFeatureStyle","vectorGridFeatureToGeoJSON","lyr","points","_parts","part","pt","x","y","originalXs","_a","concat","apply","__spread","minx","Math","min","maxx","max","originalYs","_b","miny","maxy","converter","from","to","fromDelta","toDelta","c","xConverter","yConverter","type","geometry","coordinates","DEFAULT_WMS_PARAMS","format","transparent","WmsLayerComponent","params","wms","DateElementComponent","step","changed","disabled","move","n","src","property","_r6","stepDays","DateSelectionComponent_div_1_div_3_Template","dateStruct","dateStructChanged","_r3","ɵɵreference","toggle","DateSelectionComponent_div_1_div_8_Template","ctx_r0","maxDateStruct","minDateStruct","_r17","ctx_r13","_r19","ctx_r14","_r21","ctx_r15","DateSelectionComponent_div_2_date_element_1_Template","DateSelectionComponent_div_2_date_element_2_Template","DateSelectionComponent_div_2_date_element_3_Template","need","day","month","year","DateSelectionComponent","timeUtils","dateChange","referenceDate","atMax","atMin","minDate","convertDate","maxDate","date","timestep","assessDateComponents","checkLimits","Date","UTC","checkReference","getTime","setDate","getDate","onDateChanged","datesEqual","refComponents","map_wald_1","interpolate","getFullYear","getMonth","split","s","currentRef","timeSpan","days","round","TimeUtilsService","DateSelectionComponent_div_1_Template","DateSelectionComponent_div_2_Template","MapCoordinatesComponent","e","mapChange","getBounds","mouseCoordinates","ɵɵpipeBind1","__exportStar","basemapDescriptor","vectorLayerDescriptor","leaflet_service","leafletMap_component","draw_component","geojsonLayer_component","legend_component","mapControl_component","oneTimeSplash_component","vectorTileLayer_component","wmsLayer_component","dateElement_component","dateSelection_component","mapCoordinates_component","draw_component_1","geojson_layer_component_1","leaflet_map_component_1","legend_component_1","map_control_component_1","one_time_splash_component_1","vector_tile_layer_component_1","wms_layer_component_1","date_element_component_1","date_selection_component_1","map_coordinates_component_1","services","MapWaldLeafletModule","forRoot","moduleInitialisation","ngModule","providers","imports","common_1","forms_1","http_1","ng_bootstrap_1","declarations","esm5"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport * as leaflet from 'leaflet';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class LeafletService {\n  map: Promise<leaflet.Map>;\n  private resolve: ((x: leaflet.Map)=>void);\n  private reject: ((x: any)=>void);\n\n  constructor() {\n    this.map = new Promise<leaflet.Map>((res,rej)=>{\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n\n  mapCreated(map: leaflet.Map): void {\n    addControlPlaceholders(map);\n    this.resolve(map);\n  }\n\n  withMap(fn:((m:L.Map)=>void)): void {\n    this.map.then(fn);\n  }\n}\n\nfunction addControlPlaceholders(map: any) {\n  var corners = map._controlCorners,\n      l = 'leaflet-',\n      container = map._controlContainer;\n\n  function createCorner(vSide:string, hSide:string) {\n      var className = l + vSide + ' ' + l + hSide;\n\n      corners[vSide + hSide] = leaflet.DomUtil.create('div', className, container);\n  }\n\n  createCorner('middle', 'left');\n  createCorner('middle', 'right');\n  createCorner('top', 'center');\n  createCorner('bottom', 'center');\n}\n\nexport function ensurePane(map:any, pane:string, zIndex:number): void {\n  if (!map.getPane(pane)) {\n    map.createPane(pane);\n    map.getPane(pane).style.zIndex = 405 + zIndex;\n  }\n}","import { Component, OnInit, OnChanges, SimpleChanges, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport * as leaflet from 'leaflet';\nimport { LeafletService } from './leaflet.service';\nimport { Bounds } from 'map-wald';\nimport { BasemapDescriptor } from './data';\n\nconst DEFAULT_BASE_MAP='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n@Component({\n  selector: 'leaflet-map',\n  template: `<div class=\"leafletHost\" [style]=\"styles\">\n  <ng-content></ng-content>\n</div>\n`,styles: [\n  `\n  .leafletHost{\n    width:100%;\n    min-height:400px;\n  }`\n]\n})\nexport class LeafletMapComponent implements OnInit, OnChanges {\n  @Input() bounds: Bounds;\n  @Input() maxBounds: Bounds;\n  @Input() baseMap: BasemapDescriptor;\n  @Input() zoomControl = true;\n  @Input() minZoom = 5;\n  @Input() maxZoom = 32;\n  @Input() pointSelection = false;\n  @Output() pointSelected = new EventEmitter<leaflet.LatLng>();\n\n  map: leaflet.Map;\n  styles: any = {};\n  initialised = false;\n\n  // Leaflet.TileLayer\n  private baseLayer: leaflet.TileLayer;\n\n  constructor(private element: ElementRef, private svc: LeafletService) {\n    console.log('LeafletMapComponent');\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if(!this.initialised){\n      return;\n    }\n\n    const changeCount = Object.keys(changes).length;\n\n    // if(this.creating){\n    //   return;\n    // }\n\n    // if(this.map){\n    //   if(changes.markers){\n    //     this.setupMarkers();\n\n    //     if(changeCount===1){\n    //       return;\n    //     }\n    //   }\n    //   this.map.remove();\n    // }\n\n//    if(!this.creating){\n    this.updateMap(changes);\n//    }\n\n    if(changes.bounds){\n      this.setBounds();\n    }\n  }\n\n  ngOnInit(): void {\n    this.updateMap();\n    this.setBounds();\n  }\n\n  updateMap(changes?: SimpleChanges): void {\n    setTimeout(()=>{\n      if(!this.map){\n        this.createMap();\n        return;\n      }\n\n      if(changes&&changes.baseMap){\n        // this.baseLayer.setUrl(this.baseMap.urlTemplate || DEFAULT_BASE_MAP)\n        if(this.baseLayer){\n          this.baseLayer.setUrl(this.baseMap.urlTemplate || DEFAULT_BASE_MAP);\n          // this.baseLayer.removeFrom(this.map);\n        } else if(this.baseMap) {\n          this.createBaseLayer();\n          this.baseLayer.addTo(this.map).bringToBack();\n        }\n      }\n    });\n\n    // Update parameters\n  }\n\n  createBaseLayer(): void {\n    this.baseLayer = null;\n    if(!this.baseMap){\n      return;\n    }\n\n    const options: leaflet.TileLayerOptions = {};\n    if(this.baseMap.maxNativeZoom){\n      options.maxNativeZoom = this.baseMap.maxNativeZoom;\n    }\n\n    this.baseLayer = leaflet.tileLayer(this.baseMap.urlTemplate || DEFAULT_BASE_MAP,options);\n  }\n\n  createMap(): void {\n    setTimeout(()=>{\n      if(this.map){\n        this.map.remove();\n        this.map = null;\n      }\n\n      const theDiv = this.element.nativeElement as HTMLElement;\n      const theHost = theDiv.querySelector('.leafletHost');\n\n      // let baseLayers = R.mapObjIndexed(v=>{\n      //   return L.tileLayer(v,\n      //     { maxZoom: 18, attribution: '...' });\n      // },this.baseMaps);\n\n      // if(!this.baseMap || !baseLayers[this.baseMap]){\n      //   this.baseMap = Object.keys(this.baseMaps)[0];\n      // }\n\n      // let baseLayerArray = [baseLayers[this.baseMap]];\n      let crs = leaflet.CRS.EPSG3857;//:L.CRS.Simple;\n      // if(this.crs){\n      //   crs = L.CRS[this.crs];\n      // }\n\n      // let panes = 0;\n      // if(this.map){\n      //   panes = getCustomMapPanes(this.map).length;\n      // }\n      this.createBaseLayer();\n      const baseLayerArray = [\n      ];\n      if(this.baseLayer){\n        baseLayerArray.push(this.baseLayer);\n      }\n\n      this.map = leaflet.map(theHost as HTMLElement,{\n        crs,\n        zoom: 5,\n        maxBounds: toBounds(this.maxBounds),\n        minZoom: this.minZoom,\n        maxZoom: this.maxZoom,\n        zoomControl: this.zoomControl,\n        center: leaflet.latLng(-20, 135),\n        // zoom: this.zoom,\n        // minZoom: this.minZoom,\n        // maxZoom: this.maxZoom,\n        scrollWheelZoom: true,\n        layers:baseLayerArray,\n        continuousWorld: false,\n        noWrap: true,\n        tap: false,\n        // worldCopyJump:true\n            // attributionControl: this.attribution\n      } as leaflet.MapOptions);\n      this.svc.mapCreated(this.map);\n      // if(!this.pannable){\n      //   this.map.dragging.disable();\n      // }\n\n      // if(!this.zoomable){\n      //   this.map.touchZoom.disable();\n      //   this.map.doubleClickZoom.disable();\n      //   this.map.scrollWheelZoom.disable();\n      // }\n\n      // configureVectorPanes(panes,this.map);\n\n      // this._helper.register(this.map);\n      this.map.on('click',(evt: leaflet.LeafletMouseEvent)=>{\n        if(!this.pointSelection || evt.originalEvent.defaultPrevented){\n          return;\n        }\n\n        this.pointSelected.emit(evt.latlng);\n      });\n      // this.creating=false;\n\n      // this.map.on('zoomend',()=>this.coordinatesChanged());\n      // this.map.on('moveend',()=>this.coordinatesChanged());\n\n      // if(this.showLayerControl){\n      //   this.layerControl = L.control.layers(baseLayers, [],{\n      //     hideSingleBase:true\n      //   }).addTo(this.map);\n      // }\n\n      // this.mapCreated.emit(this.map);\n\n\n\n      // this.markerLayers = [];\n      // this.setupMarkers();\n\n      this.setBounds();\n      this.initialised = true;\n    });\n\n  }\n\n  setBounds(): void {\n    if(!this.map||!this.bounds){\n      return;\n    }\n\n    this.map.fitBounds(toBounds(this.bounds));\n  }\n\n}\n/*\nhttp://35.244.111.168:8080/wms\n?service=WMS\n&request=GetMap\n&layers=wcf\n&styles=\n&format=image%2Fpng\n&transparent=true\n&version=1.1.1\n&time=2019-01-01T00%3A00%3A00.000Z\n&width=256\n&height=256\n&srs=EPSG%3A3857\n&bbox=-17532819.79994059,-5009377.085697311,-15028131.257091936,-2504688.542848655\n\n*/\n\nfunction toBounds(bounds:Bounds):L.LatLngBoundsLiteral{\n  if(!bounds){\n    return null;\n  }\n\n  return [\n    [bounds.south,bounds.west],\n    [bounds.north,bounds.east]\n  ];\n}","import { Component, OnInit, Output, EventEmitter, OnDestroy, Input } from '@angular/core';\nimport * as L from 'leaflet';\nimport 'leaflet-draw';\nimport { ensurePane, LeafletService } from './leaflet.service';\n\n@Component({\n  selector: 'draw',\n  template: '',\n  styles: []\n})\nexport class DrawComponent implements OnInit, OnDestroy {\n  // @Input() zIndex = 2000;\n  @Output() featureClosed = new EventEmitter<any>();\n\n  private drawnItems: L.FeatureGroup;\n  private drawControl: L.Control.Draw;\n  private polygon: L.Draw.Polygon;\n\n  constructor(private map: LeafletService) { }\n\n  keyHandler = (event: L.LeafletKeyboardEvent) => {\n    const key = event.originalEvent.key;\n    if (key === 'Escape') {\n      this.drawnItems.clearLayers();\n      this.polygon.removeHooks();\n      this.map.withMap(m=>this.initiateDrawing(m));\n    } else if((key === 'Delete')||(key === 'Backspace') ){\n      this.polygon.deleteLastVertex();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.map.withMap(m=>this.removeControl(m))\n  }\n\n  ngOnInit(): void {\n    this.map.withMap(m=>this.addControl(m))\n  }\n\n  removeControl(m: L.Map): void {\n    m.removeLayer(this.drawnItems);\n    this.polygon.removeHooks();\n    // m.removeControl(this.drawControl);\n    m.off(L.Draw.Event.DRAWSTART);\n    m.off(L.Draw.Event.CREATED);\n    m.off('keyup',this.keyHandler);\n  }\n\n  addControl(m: L.Map): void {\n    this.drawnItems = new L.FeatureGroup();\n    m.addLayer(this.drawnItems);\n\n    // this.drawControl = new L.Control.Draw({\n    //   draw: {\n    //     polyline: false,\n    //     circle: false,\n    //     marker: false,\n    //     rectangle: false,\n    //     circlemarker: false\n    //   },\n    //   edit: null\n    // });\n    // m.addControl(this.drawControl);\n    this.initiateDrawing(m);\n\n    m.on(L.Draw.Event.DRAWSTART, (event) => {\n      this.drawnItems.clearLayers();\n    });\n\n    m.on(L.Draw.Event.DRAWVERTEX, (event) => {\n      this.drawnItems.clearLayers();\n    });\n\n    m.on(L.Draw.Event.CREATED, (event) => {\n      console.log(event);\n\n      const layer = event.layer;\n      this.drawnItems.clearLayers();\n      this.drawnItems.addLayer(layer);\n      this.featureClosed.emit(layer.toGeoJSON());\n      this.polygon.removeHooks();\n      this.initiateDrawing(m);\n    });\n\n    m.on('keyup',this.keyHandler);\n  }\n\n  initiateDrawing(m: L.Map): void {\n    // const pane = `drawn-polygon-${this.zIndex}`;\n    // ensurePane(m,pane,this.zIndex);\n    (L.Draw.Polygon.prototype as any)._onTouch = L.Util.falseFn;\n    // const options = {zIndexOffset:this.zIndex,repeatMode: false};\n    this.polygon = new L.Draw.Polygon(m as L.DrawMap, {repeatMode: false});\n    this.polygon.addHooks();\n  }\n}\n\n\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport * as L from 'leaflet';\nimport 'leaflet.vectorgrid';\nimport { LeafletService, ensurePane } from './leaflet.service';\nimport { TiledSublayerDescriptor } from './data';\nimport { HttpClient } from '@angular/common/http';\nimport { ScaledStyle, StyleValue } from 'map-wald';\nimport { Feature } from 'geojson';\n\nconst STYLES = {\n  fillOpacity: 0.0,\n  weight: 1.0\n};\n\nexport enum PointMode {\n  default,\n  circle\n}\n\n@Component({\n  selector: 'geojson-layer',\n  template: '',\n  styles: ['']\n})\nexport class GeojsonLayerComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() url: string;\n  @Input() features: any;\n  // @Input() styles: any;\n  @Input() sublayers: TiledSublayerDescriptor[] = [];\n  @Input() pointMode:PointMode = PointMode.default;\n  @Input() style: {[key:string]:StyleValue} = {};\n  // @Input() idColumn = 'id';\n  @Output() featureSelected = new EventEmitter<any>();\n  @Input() zIndex = 100;\n\n  private destroyed = false;\n  private selectedFeature: any;\n  private vectorLayer: L.GeoJSON;\n  // private data: any;\n\n  constructor(private http: HttpClient, private map: LeafletService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n    this.map.map.then(m => {\n      this.remove(m);\n    });\n  }\n\n  private remove(m: L.Map): void {\n    if (this.vectorLayer) {\n      this.vectorLayer.removeFrom(m);\n      this.vectorLayer = null;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.url) {\n      this.downloadLayer(changes.url.currentValue);\n    } else if(changes.features||changes.pointMode){\n      this.makeLayer();\n    }\n  }\n\n  downloadLayer(url:string): void {\n    this.http.get(this.url).subscribe((data: any) => {\n      if (url !== this.url) {\n        // out of date!\n        return;\n      }\n      this.features = data;\n\n      this.makeLayer();\n    });\n  }\n\n  makeLayer(): void {\n    this.map.map.then(m => {\n      this.remove(m);\n      if (this.destroyed) {\n        return;\n      }\n\n      const style = (f: any)=>{\n        const styles: {[key:string]:any} = Object.assign({},STYLES);\n        Object.keys(this.style).forEach(k=>{\n          const val = this.style[k];\n          if((val as ScaledStyle<any>).getStyleValue) {\n            styles[k] = (val as ScaledStyle<any>).getStyleValue(f);\n          } else {\n            styles[k] = val;\n          }\n        });\n        return styles;\n      };\n\n      const options:L.GeoJSONOptions = {\n        // interactive: true\n        style: style\n      };\n\n      if(this.pointMode===PointMode.circle){\n        options.pointToLayer = (feature, latlng) => {\n          let radius = 3;\n          if(this.style && this.style.radius) {\n            if((this.style.radius as ScaledStyle<number>).getStyleValue){\n              radius = (this.style.radius as ScaledStyle<number>).getStyleValue(feature);\n            } else {\n              radius = this.style.radius as number;\n            }\n          }\n          return L.circleMarker(latlng,{radius:radius});\n        };\n      }\n\n      const pane = `vector-pane-${this.zIndex}`;\n      ensurePane(m,pane,this.zIndex)\n      options.pane = pane;\n      this.vectorLayer = L.geoJSON(this.features, options);\n\n      this.vectorLayer.on('click' as any, (event) => {\n        if (this.selectedFeature) {\n          this.vectorLayer.resetStyle(this.selectedFeature);\n          // resetFeatureStyle(this.selectedFeature);\n        }\n        this.selectedFeature = event.layer;\n        this.selectedFeature.setStyle({\n          weight:5\n        });\n\n        this.featureSelected.emit(this.selectedFeature.feature);\n      });\n      this.vectorLayer.addTo(m);\n    });\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'legend',\n  template: `<div class=\"map-legend panel panel-group\">\n<ng-template #tooltipContent>\n  <span [innerHtml]=helpText></span>\n</ng-template>\n  <strong>{{title}} <span *ngIf=\"mapUnits\" [innerHTML]=\"'('+mapUnits+')'\"></span>\n        <span *ngIf=\"helpText\"\n              [ngbTooltip]=\"tooltipContent\"\n              [placement]=\"tooltipPlacement\"\n              container=\"body\">\n          <i class=\"fa fa-info-circle\"></i>\n        </span>\n  </strong>\n\n  <div *ngIf=\"!imageURL\">\n    <div style=\"display:table;line-height:15px\">\n      <div style=\"display:table-row;padding:0;\"\n          *ngFor=\"let colour of colours; let i=index\">\n        <div class=\"legend-colour\" [ngClass]=\"markerClasses[i]||markerClasses[0]||''\">\n          <i class=\"legend-entry\" [ngStyle]=\"{background:colour}\"></i>\n        </div>\n        <div class=\"legend-label\">\n          <span [innerHTML]=\"labels[i]\"></span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"imageURL\">\n    <img [src]=\"imageURL\">\n  </div>\n  <p *ngIf=\"attributionLink\">Source: <a [href]=\"attributionLink\">{{attribution || 'details'}}</a></p>\n  <p *ngIf=\"attribution&&!attributionLink\">Source: {{attribution}}</p>\n</div>\n`, styles: [`\n.map-legend{\n  display:block;\n  background: white;\n}\n\n.legend-colour{\n  display:table-cell;\n  padding:0px;\n}\n\n.legend-label{\n  display:table-cell;\n  padding:0px 4px 2px 2px;\n  font-size:10px;\n  vertical-align:middle;\n}\n\n.legend-entry {\n  float: left;\n  width: 15px !important;\n  height: 15px !important;\n}\n\n.legend-colour.circle i.legend-entry {\n  border-radius:7px;\n}\n`]\n})\nexport class LegendComponent implements OnInit {\n  @Input() colours: Array<string> = ['red', 'white', 'blue'];\n  @Input() labels: Array<string> = [];\n  @Input() markerClasses: string[] = [];\n  @Input() imageURL: string\n  @Input() title = 'the title';\n  @Input() mapUnits = '';\n  @Input() helpText: string;\n  @Input() tooltipPlacement = 'right';\n  @Input() attribution: string;\n  @Input() attributionLink: string;\n\n  generatedLabels: string[] = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\nexport function makeColour(r: number, g: number, b: number, a?: number): string {\n  a = (a === undefined) ? 1 : a;\n  return `rgb(${r},${g},${b},${a})`;\n}\n\n","/// <reference types=\"./leaflet.customcontrols\" />\n\nimport { Component, OnInit, ViewChild, Input, AfterViewInit, ElementRef } from '@angular/core';\nimport { LeafletService } from './leaflet.service';\nimport * as leaflet from 'leaflet';\n\ninterface SavedMapSettings {\n  pan: boolean;\n  zoom: boolean;\n}\n\nconst TAG_WHITE_LIST = ['INPUT', 'SELECT', 'OPTION'];\n\ninterface MapWithHandler{\n  _handlers: {\n    enable: ()=>void;\n    disable: ()=>void;\n  }[];\n}\n\n@Component({\n  selector: 'map-control',\n  template: `<div #mapControl class=\"map-control-content\"\n                  (touchstart)=\"ontouchstart($event)\"\n                  (mouseenter)=\"disableMapEvents($event)\"\n                  (mouseleave)=\"enableMapEvents($event)\"\n                  (click)=\"m($event)\"\n                  (dblclick)=\"m($event)\"\n                  (mousemove)=\"m($event)\"\n                  (mousedown)=\"m($event)\"\n                  (mouseup)=\"m($event)\">\n  <ng-content></ng-content>\n</div>\n`, styles: [`.map-control-content{\n  background: transparent;\n}\n`],\n})\nexport class MapControlComponent implements OnInit, AfterViewInit {\n  @ViewChild('mapControl', { static: false }) mapControl: Component;\n  @Input() position = 'TOP_RIGHT';\n  touchDevice = false;\n\n  constructor(private _el: ElementRef, private _map: LeafletService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    // this._wrapper.getNativeMap().then((m)=>{\n    let content: HTMLElement = this._el.nativeElement.querySelector('.map-control-content');\n\n    //   // If content of the map control is not already wrapped in a div, do it\n    //   // now.\n    if (content.nodeName !== \"DIV\") {\n      const controlDiv: HTMLElement = document.createElement('div');\n      controlDiv.appendChild(content);\n      content = controlDiv;\n    }\n\n    const CustomControl = leaflet.Control.extend({\n      onAdd: (map:leaflet.Map) => {\n        return content;\n      },\n\n      onRemove: (map:leaflet.Map) => {\n        // Nothing to do here\n      }\n    });\n\n    const makeCustomControl = (opts:any) => {\n      return new CustomControl(opts);\n    };\n\n    this._map.map.then(map => {\n      const c = makeCustomControl({\n        position: this.position.replace(/_/g,'').toLowerCase()\n      });\n      c.addTo(map);\n    });\n    //   (<any>m).controls[(<any>window).google.maps.ControlPosition[this.position]].push(content);\n    // });\n  }\n\n  ontouchstart(ev: TouchEvent): void {\n    this.touchDevice = true;\n    if(TAG_WHITE_LIST.indexOf((ev.target as any).tagName)>=0){\n      ev.stopPropagation();\n    }\n    this.enableMapEvents(null);\n  }\n\n  disableMapEvents(event:MouseEvent): void {\n    this.m(event);\n\n    if(this.touchDevice){\n      return;\n    }\n\n    this._map.map.then(m=>{\n      m.dragging.disable();\n      m.scrollWheelZoom.disable();\n\n      (m as any as MapWithHandler)._handlers.forEach(h=>h.disable());\n    });\n  }\n\n  enableMapEvents(event:MouseEvent): void {\n    if(event){\n      this.m(event);\n    }\n\n    this._map.map.then(m=>{\n      const options = {\n        pan:true,\n        zoom:true\n      };\n\n      if(options.pan){\n        m.dragging.enable();\n      }\n\n      if(options.zoom){\n        m.scrollWheelZoom.enable();\n      }\n\n      (m as any as MapWithHandler)._handlers.forEach(h=>h.enable());\n    });\n  }\n\n  m(event:MouseEvent){\n    event.stopPropagation();\n  }\n\n}\n","import { Component, Input, ViewChild, AfterViewInit, ElementRef, EventEmitter, Output } from '@angular/core';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport * as store from 'store';\n\nexport enum SplashCloseMode {\n  NotOpened,\n  Accepted,\n  Cancelled\n}\n\n@Component({\n  selector: 'one-time-splash',\n  template: `<ng-template #splashTemplate let-c=\"close\" let-d=\"dismiss\">\n  <div *ngIf=\"label\" class=\"modal-header\">\n    <h4 class=\"modal-title\">\n      {{label}}</h4>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"d('Cross click')\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"modal-footer\">\n    <label *ngIf=\"application\">\n      <input type=\"checkbox\" [(ngModel)]=\"doNotShow\" (ngModelChange)=\"doNotShowClicked()\">\n      &nbsp; {{hideMessage}}\n    </label>\n    <button autofocus type=\"button\" class=\"btn btn-secondary\" (click)=\"c('Close click')\">Close</button>\n  </div>\n  </ng-template>\n`,\n  styles: [``]\n})\nexport class OneTimeSplashComponent implements AfterViewInit  {\n  @ViewChild('splashTemplate',{static:false}) splashTemplate:any;\n  @Input() application:string;\n  @Input() label = 'About';\n  @Input() hideMessage = 'Understood, I don’t need to see this again';\n  @Input() klass: string;\n  @Input() showOnLaunch = true;\n  @Output() closed = new EventEmitter<SplashCloseMode>();\n  doNotShow: boolean;\n  current:NgbModalRef;\n\n  constructor(private modalService: NgbModal){\n\n  }\n\n  storageKey(): string {\n    if(!this.application){\n      return null;\n    }\n\n    return this.application  + '-splash-skip';\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(()=>{\n      const key = this.storageKey();\n      if(key){\n        this.doNotShow = store.get(key,false);\n      }\n\n      if(this.showOnLaunch){\n        this.defaultShow();\n      }\n    });\n  }\n\n  defaultShow(): void {\n    if(!this.doNotShow){\n      this.show();\n    } else {\n      this.closed.emit(SplashCloseMode.NotOpened);\n    }\n  }\n\n  show(): void {\n    this.current = this.modalService.open(this.splashTemplate,{\n      size:'lg',\n      windowClass:this.klass\n    });\n  }\n\n  close(): void {\n    if(!this.current){\n      this.closed.emit(SplashCloseMode.NotOpened);\n      return;\n    }\n\n    this.current.close();\n    this.current=null;\n    this.closed.emit(SplashCloseMode.Accepted);\n  }\n\n  doNotShowClicked(): void {\n    const key = this.storageKey();\n    if(!key){\n      return;\n    }\n\n    store.set(key,this.doNotShow);\n  }\n}\n","/// <reference types=\"./leaflet.vectorgrid\" />\n\nimport { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport * as leaflet from 'leaflet';\n// import 'leaflet.vectorgrid';\nimport { ensurePane, LeafletService } from './leaflet.service';\nimport { TiledSublayerDescriptor } from './data';\n\n@Component({\n  selector: 'vector-tile-layer',\n  template: '',\n  styles: []\n})\nexport class VectorTileLayerComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() url: string;\n  @Input() styles: any;\n  @Input() sublayers: TiledSublayerDescriptor[] = [];\n  @Output() featureSelected = new EventEmitter<any>();\n  @Input() minZoom = 0;\n  @Input() maxZoom = 30;\n  @Input() minNativeZoom = 11;\n  @Input() maxNativeZoom = 13;\n  @Input() zIndex = 100;\n\n  private destroyed = false;\n  private selectedFeature: any;\n  private vectorLayer: L.VectorGridLayer;\n\n  constructor(private map: LeafletService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n    this.map.map.then(m=>{\n      this.remove(m);\n    });\n  }\n\n  private getFeatureId(f:any): string {\n    const match = this.sublayers.find(v=>f.properties[v.keyField]);\n    return f.properties[match.keyField];\n  }\n\n  private remove(m: L.Map): void {\n    if(this.vectorLayer){\n      this.vectorLayer.removeFrom(m);\n      this.vectorLayer = null;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.map.map.then(m=>{\n      this.remove(m);\n      if(this.destroyed){\n        return;\n      }\n\n      const pane = `vector-pane-${this.zIndex}`;\n      ensurePane(m,pane,this.zIndex)\n\n      this.vectorLayer = L.vectorGrid.protobuf(this.url,{\n        pane,\n        minZoom:this.minZoom,\n        maxZoom:this.maxZoom,\n        minNativeZoom:this.minNativeZoom,\n        maxNativeZoom:this.maxNativeZoom,\n        interactive: true,\n        vectorTileLayerStyles: this.styles,\n        getFeatureId: (f:any) => this.getFeatureId(f)\n      });\n\n      this.vectorLayer.on('click' as any,(event)=>{\n        if(this.selectedFeature){\n          this.vectorLayer.resetFeatureStyle(this.selectedFeature);\n        }\n        this.selectedFeature = this.getFeatureId(event.layer);\n        this.vectorLayer.setFeatureStyle(this.selectedFeature, {\n          weight:5\n        });\n\n        const geoJSON = this.vectorGridFeatureToGeoJSON(event.layer);\n        this.featureSelected.emit(geoJSON);\n      });\n      this.vectorLayer.addTo(m);\n    });\n  }\n\n  vectorGridFeatureToGeoJSON(lyr:any):any{\n    const parts:any[][] = (lyr._parts[0]&&lyr._parts[0][0])?lyr._parts:[lyr._parts];\n    const points = (parts as any[]).map((part:any[])=>{\n      return part.map(pt=>([pt.x,pt.y] as number[]));\n    });\n    const originalXs = ([] as number[]).concat(...points.map(part=>part.map(pt=>pt[0])));\n    const minx = Math.min(...originalXs);//points[0].map(pt=>pt[0]));\n    const maxx = Math.max(...originalXs);//points[0].map(pt=>pt[0]));\n\n    const originalYs = ([] as number[]).concat(...points.map(part=>part.map(pt=>pt[1])));\n    const miny = Math.min(...originalYs);//points[0].map(pt=>pt[1]));\n    const maxy = Math.max(...originalYs);//points[0].map(pt=>pt[1]));\n\n    function converter(from:number[],to:number[]): ((c:number)=>number) {\n      const fromDelta = from[1]-from[0];\n      const toDelta = to[1] - to[0];\n      return (c)=>to[0] + ((c-from[0])/fromDelta) * toDelta;\n    }\n\n    const xConverter = converter([minx,maxx],[lyr.properties.minx,lyr.properties.maxx]);\n    const yConverter = converter([miny,maxy],[lyr.properties.maxy,lyr.properties.miny]);\n\n    return {\n      type:'Feature',\n      geometry:{\n        type:'Polygon',\n        coordinates:points.map(part=>part.map(pt=>[xConverter(pt[0]),yConverter(pt[1])]))\n      },\n      properties:lyr.properties\n    };\n  }\n\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ensurePane, LeafletService } from './leaflet.service';\nimport * as L from 'leaflet';\n\nconst DEFAULT_WMS_PARAMS = {\n  format: 'image/png',\n  transparent: true\n};\n\n@Component({\n  selector: 'wms-layer',\n  template: '',\n  styles: []\n})\nexport class WmsLayerComponent implements OnInit, OnChanges {\n  @Input() url: string;\n  @Input() params: any = {};\n  @Input() zIndex = 10;\n  private layer: L.TileLayer;\n\n  constructor(private map: LeafletService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.map.map.then(m=>{\n      if(this.layer){\n        this.layer.removeFrom(m);\n        this.layer = null;\n      }\n      if(!this.url||!this.params){\n        return;\n      }\n\n      const params = Object.assign({},DEFAULT_WMS_PARAMS,this.params);\n\n      const pane = `wms-pane-${this.zIndex}`;\n      ensurePane(m,pane,this.zIndex)\n      params.pane = pane;\n\n      this.layer = L.tileLayer.wms(this.url,params as L.WMSOptions);\n      // this.layer.options.noWrap = true;\n      this.layer.addTo(m);\n    });\n  }\n\n}\n","import { Component, Input, ViewChild, AfterViewInit, ElementRef, Output, EventEmitter } from '@angular/core';\n\n\ndeclare var Plotly: any;\n\n@Component({\n  selector: 'date-element',\n  template: `<div class=\"row no-gutters\">\n  <div class=\"col-4\">{{label}}</div>\n  <div class=\"col-2\">\n    <button class=\"btn btn-secondary btn-sm\"\n            (click)=\"move(-step)\"\n            [disabled]=\"disabled\">\n      <i class=\"fa fa-angle-left\"></i>\n    </button>\n  </div>\n  <div class=\"col-4\"><button class=\"btn btn-link btn-sm\">{{src[property]}}</button></div>\n  <div class=\"col-2\">\n    <button class=\"btn btn-secondary btn-sm\"\n            (click)=\"move(step)\"\n            [disabled]=\"disabled\">\n      <i class=\"fa fa-angle-right\"></i>\n    </button>\n  </div>\n</div>\n`,styles: []})\nexport class DateElementComponent implements AfterViewInit  {\n  @Input() label:string;\n  @Input() property:string;\n  @Input() src:any;\n  @Input() step = 1;\n  @Output() changed = new EventEmitter<any>();\n  @Input() disabled = false;\n\n  constructor(){\n\n  }\n\n  ngAfterViewInit(){\n\n  }\n\n  move(n:number){\n    this.src[this.property] += n;\n    this.changed.emit(this.src);\n  }\n}\n","import { Component, Input, ViewChild, AfterViewInit, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\nimport { TimeUtilsService, InterpolationService } from 'map-wald';\n\nconst MILLISECONDS_PER_DAY=24*60*60*1000;\n\ndeclare var Plotly: any;\n\n@Component({\n  selector: 'date-selection',\n  template: `<div class=\"date-control container-fluid\">\n  <div *ngIf=\"style!=='arrows'\" class=\"row no-gutters\">\n    <div class=\"col-12 form-group-inline\">\n        <div class=\"input-group input-group-sm\">\n          <div *ngIf=\"step\" class=\"ds-btn input-group-addon\" (click)=\"move(-stepDays)\">\n            <i class=\"fa fa-angle-left\"></i>\n          </div>\n          <input class=\"form-control form-control-sm\"\n                 placeholder=\"yyyy-mm-dd\"\n                 name=\"dp\"\n                 [(ngModel)]=\"dateStruct\"\n                 (ngModelChange)=\"dateStructChanged()\"\n                 ngbDatepicker\n                 #d=\"ngbDatepicker\"\n                 [maxDate]=\"maxDateStruct\"\n                 [minDate]=\"minDateStruct\"\n                 [disabled]=\"disabled\">\n          <div class=\"ds-btn input-group-addon\" (click)=\"disabled||d.toggle()\" >\n            <i class=\"fa fa-calendar\"></i>\n          </div>\n          <div *ngIf=\"step\" class=\"ds-btn input-group-addon\" (click)=\"move(stepDays)\">\n            <i class=\"fa fa-angle-right\"></i>\n          </div>\n        </div>\n      </div>\n\n    <!--\n      <div class=\"col-2\" >\n        <button class=\"btn btn-secondary btn-sm\" [disabled]=\"atMax\"\n                (click)=\"move(1)\"><i class=\"fa fa-chevron-right\"></i></button>\n      </div>\n    -->\n  </div>\n\n  <div *ngIf=\"style==='arrows'\">\n    <date-element *ngIf=\"need.day\"   [src]=\"dateStruct\" [property]=\"'day'\" [label]=\"'Day'\"\n                  [step]=\"stepDays\"\n                  (changed)=\"dateStructChanged()\"\n                  [disabled]=\"disabled\"></date-element>\n    <date-element *ngIf=\"need.month\" [src]=\"dateStruct\" [property]=\"'month'\" [label]=\"'Month'\"\n                  (changed)=\"dateStructChanged()\"\n                  [disabled]=\"disabled\"></date-element>\n    <date-element *ngIf=\"need.year\"  [src]=\"dateStruct\" [property]=\"'year'\" [label]=\"'Year'\"\n                  (changed)=\"dateStructChanged()\"\n                  [disabled]=\"disabled\"></date-element>\n  </div>\n</div>\n`,styles: [\n  `\n  .date-control.container-fluid {\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n\n  .ds-btn {\n    min-width:10px;\n    padding: 5px;\n  }\n  `\n]})\nexport class DateSelectionComponent implements AfterViewInit  {\n  @Input() date: Date;\n  @Output() dateChange = new EventEmitter();\n  @Input() timestep: string;\n  @Input() minDate: Date|string;\n  @Input() maxDate: Date|string;\n  @Input() style: ('popup'|'arrows') = 'arrows';\n  @Input() stepDays = 1;\n  @Input() referenceDate:string = null;\n  @Input() disabled = false;\n  @Input() step = false;\n\n  need = {\n    day:true,\n    month:true,\n    year:true\n  };\n\n  minDateStruct:NgbDateStruct;\n  maxDateStruct:NgbDateStruct;\n  dateStruct:NgbDateStruct;\n\n  atMax:boolean=false;\n  atMin:boolean=false;\n\n  constructor(private timeUtils: TimeUtilsService){\n\n  }\n\n  ngAfterViewInit(){\n\n  }\n\n  ngOnChanges(changes:any){\n    if(changes.minDate){\n      this.minDateStruct = this.timeUtils.convertDate(this.minDate);\n    }\n\n    if(changes.maxDate){\n      this.maxDateStruct = this.timeUtils.convertDate(this.maxDate);\n    }\n\n    if(changes.date){\n      this.dateStruct = this.timeUtils.convertDate(this.date);\n    }\n\n    if(changes.timestep){\n      this.assessDateComponents();\n    }\n    this.checkLimits();\n  }\n\n  dateStructChanged(){\n    this.date = new Date(Date.UTC(this.dateStruct.year,this.dateStruct.month-1,this.dateStruct.day));\n    // this.date.setUTCFullYear(this.dateStruct.year)\n    // this.date.setUTCMonth(this.dateStruct.month-1)\n    // this.date.setUTCDate(this.dateStruct.day);\n    this.checkReference();\n    this.dateChange.emit(this.date);\n  }\n\n  assessDateComponents(){\n    this.need.day = this.need.month = this.need.year = true;\n    if(this.timestep==='daily'){\n      return;\n    }\n    this.need.day = false;\n\n    if(this.timestep==='annual') {\n      this.need.month = false;\n    }\n  }\n\n  move(n:number){\n    this.date = new Date(this.date&&this.date.getTime());\n    this.date.setDate(this.date.getDate()+n);\n    this.onDateChanged();\n    this.dateChange.emit(this.date);\n  }\n\n  onDateChanged(){\n    this.checkLimits();\n  }\n\n  checkLimits(){\n    this.atMax = this.timeUtils.datesEqual(this.dateStruct,this.maxDateStruct);\n    this.atMin = this.timeUtils.datesEqual(this.dateStruct,this.minDateStruct);\n  }\n  // TODO not enforcing limits etc...\n\n  checkReference(): any {\n    if(!this.referenceDate){\n      return;\n    }\n\n    let refComponents = InterpolationService.interpolate(this.referenceDate,{\n      year:this.date.getFullYear(),\n      month:this.date.getMonth()+1,\n      date:this.date.getDate()\n    }).split('-').map(s=>+s);\n\n    let currentRef = new Date(Date.UTC(refComponents[0],refComponents[1]-1,refComponents[2]));\n\n    console.log('currentRef',currentRef);\n    console.log('currentDate',this.date);\n    let timeSpan = MILLISECONDS_PER_DAY * this.stepDays;\n\n    let days = (this.date.getTime() - currentRef.getTime())/timeSpan;\n    this.date = new Date(currentRef.getTime() + Math.round(days)*timeSpan);\n    this.dateStruct = this.timeUtils.convertDate(this.date);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { LatLng, LatLngBounds, LeafletEvent, LeafletMouseEvent } from 'leaflet';\nimport { LeafletService } from './leaflet.service';\n\n@Component({\n  selector: 'map-coordinates',\n  template: `\n  <div style=\"background-color:white\">\n    <p>Cursor: {{mouseCoordinates}}</p>\n    <p>Bounds: {{bounds | json}}</p>\n</div>\n`,\n  styles: []\n})\nexport class MapCoordinatesComponent implements OnInit {\n  mouseCoordinates: LatLng;\n  bounds: LatLngBounds;\n\n  constructor(private map: LeafletService) {\n    this.withMap(m=>{\n      const events = [\n        'resize',\n        'zoomend',\n        'moveend',\n        'mousemove'\n      ]\n      events.forEach(e=>{\n        m.on(e,(evt)=>this.mapChange(evt));\n      });\n\n      // const mouseEvents = [\n      //   'mousemove'\n      // ];\n      // mouseEvents.forEach(e=>{\n      //   m.on(e,(evt)=>this.mouseEvent(evt));\n      // })\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  withMap(fn:((m:L.Map)=>void)): void {\n    this.map.map.then(fn);\n  }\n\n  mapChange(evt:LeafletEvent): void {\n    if(evt.type==='mousemove'){\n      this.mouseCoordinates = (evt as LeafletMouseEvent).latlng;\n      return;\n    }\n\n    const map:L.Map = evt.target;\n    this.bounds = map.getBounds();\n    // console.log(evt);\n  }\n\n  // mouseEvent(evt:MouseEvent):void {\n\n  // }\n}\n","\n\nexport * from './basemap-descriptor';\nexport * from './vector-layer-descriptor';\n\n\n// export * from './display-settings';\n// export * from './layer-descriptor';\n// export * from './legend-response';\n// export * from './map-settings';\n\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MapWaldCoreModule } from 'map-wald';\n\nimport { LeafletService } from './leaflet.service';\nimport { LeafletMapComponent } from './leaflet-map.component';\nimport { DrawComponent } from './draw.component';\nimport { GeojsonLayerComponent } from './geojson-layer.component';\nimport { LegendComponent } from './legend.component';\nimport { MapControlComponent } from './map-control.component';\nimport { OneTimeSplashComponent } from './one-time-splash.component';\nimport { VectorTileLayerComponent } from './vector-tile-layer.component';\nimport { WmsLayerComponent } from './wms-layer.component';\nimport { DateElementComponent } from './date-element.component';\nimport { DateSelectionComponent } from './date-selection.component';\nimport { MapCoordinatesComponent } from './map-coordinates.component';\n\nexport * from './data';\nexport * from './leaflet.service';\nexport * from './leaflet-map.component';\nexport * from './draw.component';\nexport * from './geojson-layer.component';\nexport * from './legend.component';\nexport * from './map-control.component';\nexport * from './one-time-splash.component';\nexport * from './vector-tile-layer.component';\nexport * from './wms-layer.component';\nexport * from './date-element.component';\nexport * from './date-selection.component';\nexport * from './map-coordinates.component';\n\nconst components: any[] = [\n  //$componentList\n  DrawComponent,\n  GeojsonLayerComponent,\n  LeafletMapComponent,\n  LegendComponent,\n  MapControlComponent,\n  OneTimeSplashComponent,\n  VectorTileLayerComponent,\n  WmsLayerComponent,\n  DateElementComponent,\n  DateSelectionComponent,\n  MapCoordinatesComponent\n];\n\nconst services: any[] = [\n  //$serviceList\n  LeafletService  \n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    NgbModule,\n    MapWaldCoreModule\n  ],\n  declarations: components,\n  exports: components,\n  providers: services\n})\nexport class MapWaldLeafletModule {\n  static forRoot(moduleInitialisation:any): ModuleWithProviders<MapWaldLeafletModule> {\n    return {\n      ngModule: MapWaldLeafletModule,\n      providers: services\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}