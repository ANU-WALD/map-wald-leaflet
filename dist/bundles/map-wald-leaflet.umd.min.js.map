{"version":3,"sources":["ng://map-wald-leaflet/leaflet.service.ts","ng://map-wald-leaflet/leaflet-map.component.ts","ng://map-wald-leaflet/draw.component.ts","ng://map-wald-leaflet/geojson-layer.component.ts","ng://map-wald-leaflet/legend.component.ts","ng://map-wald-leaflet/map-control.component.ts","ng://map-wald-leaflet/one-time-splash.component.ts","ng://map-wald-leaflet/vector-tile-layer.component.ts","ng://map-wald-leaflet/wms-layer.component.ts","ng://map-wald-leaflet/date-element.component.ts","ng://map-wald-leaflet/date-selection.component.ts","ng://map-wald-leaflet/map-coordinates.component.ts","ng://map-wald-leaflet/data/index.ts","ng://map-wald-leaflet/index.ts","ng://map-wald-leaflet/map-wald-leaflet.ts"],"names":["LeafletService","_this","this","map","Promise","res","rej","resolve","reject","prototype","mapCreated","corners","_controlCorners","l","container","_controlContainer","createCorner","vSide","hSide","className","leaflet","DomUtil","create","addControlPlaceholders","withMap","fn","then","factory","ɵfac","exports","DEFAULT_BASE_MAP","LeafletMapComponent","element","svc","zoomControl","minZoom","maxZoom","styles","initialised","console","log","ngOnChanges","changes","Object","keys","length","updateMap","bounds","setBounds","ngOnInit","setTimeout","baseMap","baseLayer","setUrl","urlTemplate","createBaseLayer","addTo","bringToBack","createMap","options","maxNativeZoom","tileLayer","remove","theHost","nativeElement","querySelector","crs","CRS","EPSG3857","baseLayerArray","push","zoom","center","latLng","scrollWheelZoom","layers","continuousWorld","noWrap","tap","on","evt","originalEvent","defaultPrevented","fitBounds","south","west","north","east","i0","ɵɵdirectiveInject","ElementRef","i1","selectors","inputs","features","ɵɵNgOnChangesFeature","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵstyleMap","DrawComponent","featureClosed","core_1","ngOnDestroy","m","removeControl","addControl","removeLayer","drawnItems","polygon","removeHooks","off","L","Draw","Event","DRAWSTART","CREATED","FeatureGroup","addLayer","initiateDrawing","event","clearLayers","DRAWVERTEX","layer","emit","toGeoJSON","Polygon","_onTouch","Util","falseFn","repeatMode","addHooks","outputs","encapsulation","PointMode","STYLES","fillOpacity","weight","GeojsonLayerComponent","http","sublayers","pointMode","default","style","featureSelected","destroyed","vectorLayer","removeFrom","url","downloadLayer","currentValue","makeLayer","get","subscribe","data","f","assign","forEach","k","val","getStyleValue","circle","pointToLayer","feature","latlng","radius","circleMarker","geoJSON","selectedFeature","resetStyle","setStyle","HttpClient","i2","ɵɵelement","ɵɵproperty","ctx_r1","helpText","ɵɵsanitizeHtml","ctx_r2","mapUnits","_r0","ctx_r3","tooltipPlacement","ɵɵadvance","ctx_r8","markerClasses","i_r10","ɵɵpureFunction1","colour_r9","labels","ɵɵtemplate","LegendComponent_div_7_div_2_Template","ctx_r4","colours","ctx_r5","imageURL","ɵɵsanitizeUrl","ɵɵtext","ctx_r6","attributionLink","ɵɵtextInterpolate","attribution","ɵɵtextInterpolate1","ctx_r7","LegendComponent","title","generatedLabels","LegendComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","LegendComponent_span_5_Template","LegendComponent_span_6_Template","LegendComponent_div_7_Template","LegendComponent_div_8_Template","LegendComponent_p_9_Template","LegendComponent_p_10_Template","makeColour","r","g","b","a","undefined","TAG_WHITE_LIST","MapControlComponent","_el","_map","position","touchDevice","ngAfterViewInit","content","nodeName","controlDiv","document","createElement","appendChild","CustomControl","Control","extend","onAdd","onRemove","opts","replace","toLowerCase","ontouchstart","ev","indexOf","target","tagName","stopPropagation","enableMapEvents","disableMapEvents","dragging","disable","_handlers","h","enable","viewQuery","ɵɵlistener","$event","ɵɵrestoreView","_r8","d_r3","ɵɵnextContext","dismiss","label","_r10","doNotShow","doNotShowClicked","hideMessage","OneTimeSplashComponent_ng_template_0_div_0_Template","OneTimeSplashComponent_ng_template_0_label_4_Template","c_r2","close","application","SplashCloseMode","OneTimeSplashComponent","modalService","showOnLaunch","closed","storageKey","key","store","defaultShow","NotOpened","show","current","open","splashTemplate","size","windowClass","klass","Accepted","set","NgbModal","OneTimeSplashComponent_ng_template_0_Template","VectorTileLayerComponent","minNativeZoom","getFeatureId","match","find","v","properties","keyField","vectorGrid","protobuf","interactive","vectorTileLayerStyles","resetFeatureStyle","setFeatureStyle","vectorGridFeatureToGeoJSON","lyr","points","_parts","part","pt","x","y","originalXs","_a","concat","apply","__spread","minx","Math","min","maxx","max","originalYs","_b","miny","maxy","converter","from","to","fromDelta","toDelta","c","xConverter","yConverter","type","geometry","coordinates","DEFAULT_WMS_PARAMS","format","transparent","WmsLayerComponent","params","wms","DateElementComponent","step","changed","disabled","move","n","src","property","_r6","stepDays","DateSelectionComponent_div_1_div_3_Template","dateStruct","dateStructChanged","_r3","ɵɵreference","toggle","DateSelectionComponent_div_1_div_8_Template","ctx_r0","maxDateStruct","minDateStruct","_r17","ctx_r13","_r19","ctx_r14","_r21","ctx_r15","DateSelectionComponent_div_2_date_element_1_Template","DateSelectionComponent_div_2_date_element_2_Template","DateSelectionComponent_div_2_date_element_3_Template","need","day","month","year","DateSelectionComponent","timeUtils","dateChange","referenceDate","atMax","atMin","minDate","convertDate","maxDate","date","timestep","assessDateComponents","checkLimits","Date","UTC","checkReference","getTime","setDate","getDate","onDateChanged","datesEqual","refComponents","map_wald_1","interpolate","getFullYear","getMonth","split","s","currentRef","timeSpan","days","round","TimeUtilsService","DateSelectionComponent_div_1_Template","DateSelectionComponent_div_2_Template","MapCoordinatesComponent","e","mapChange","getBounds","mouseCoordinates","ɵɵpipeBind1","__exportStar","basemapDescriptor","vectorLayerDescriptor","leaflet_service","leafletMap_component","draw_component","geojsonLayer_component","legend_component","mapControl_component","oneTimeSplash_component","vectorTileLayer_component","wmsLayer_component","dateElement_component","dateSelection_component","mapCoordinates_component","draw_component_1","geojson_layer_component_1","leaflet_map_component_1","legend_component_1","map_control_component_1","one_time_splash_component_1","vector_tile_layer_component_1","wms_layer_component_1","date_element_component_1","date_selection_component_1","map_coordinates_component_1","services","leaflet_service_1","MapWaldLeafletModule","forRoot","moduleInitialisation","ngModule","providers","imports","common_1","forms_1","http_1","ng_bootstrap_1","declarations","esm5"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport * as leaflet from 'leaflet';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class LeafletService {\n  map: Promise<leaflet.Map>;\n  private resolve: ((x: leaflet.Map)=>void);\n  private reject: ((x: any)=>void);\n\n  constructor() {\n    this.map = new Promise<leaflet.Map>((res,rej)=>{\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n\n  mapCreated(map: leaflet.Map): void {\n    addControlPlaceholders(map);\n    this.resolve(map);\n  }\n\n  withMap(fn:((m:L.Map)=>void)): void {\n    this.map.then(fn);\n  }\n}\n\nfunction addControlPlaceholders(map: any) {\n  var corners = map._controlCorners,\n      l = 'leaflet-',\n      container = map._controlContainer;\n\n  function createCorner(vSide:string, hSide:string) {\n      var className = l + vSide + ' ' + l + hSide;\n\n      corners[vSide + hSide] = leaflet.DomUtil.create('div', className, container);\n  }\n\n  createCorner('middle', 'left');\n  createCorner('middle', 'right');\n  createCorner('top', 'center');\n  createCorner('bottom', 'center');\n}\n","import { Component, OnInit, OnChanges, SimpleChanges, ElementRef, Input } from '@angular/core';\nimport * as leaflet from 'leaflet';\nimport { LeafletService } from './leaflet.service';\nimport { Bounds } from 'map-wald';\nimport { BasemapDescriptor } from './data';\n\nconst DEFAULT_BASE_MAP='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n@Component({\n  selector: 'leaflet-map',\n  template: `<div class=\"leafletHost\" [style]=\"styles\">\n  <ng-content></ng-content>\n</div>\n`,styles: [\n  `\n  .leafletHost{\n    width:100%;\n    min-height:400px;\n  }`\n]\n})\nexport class LeafletMapComponent implements OnInit, OnChanges {\n  @Input() bounds: Bounds;\n  @Input() baseMap: BasemapDescriptor;\n  @Input() zoomControl = true;\n  @Input() minZoom = 5;\n  @Input() maxZoom = 32;\n\n  map: leaflet.Map;\n  styles: any = {};\n  initialised = false;\n\n  // Leaflet.TileLayer\n  private baseLayer: leaflet.TileLayer;\n\n  constructor(private element: ElementRef, private svc: LeafletService) {\n    console.log('LeafletMapComponent');\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if(!this.initialised){\n      return;\n    }\n\n    const changeCount = Object.keys(changes).length;\n\n    // if(this.creating){\n    //   return;\n    // }\n\n    // if(this.map){\n    //   if(changes.markers){\n    //     this.setupMarkers();\n\n    //     if(changeCount===1){\n    //       return;\n    //     }\n    //   }\n    //   this.map.remove();\n    // }\n\n//    if(!this.creating){\n    this.updateMap(changes);\n//    }\n\n    if(changes.bounds){\n      this.setBounds();\n    }\n  }\n\n  ngOnInit(): void {\n    this.updateMap();\n    this.setBounds();\n  }\n\n  updateMap(changes?: SimpleChanges): void {\n    setTimeout(()=>{\n      if(!this.map){\n        this.createMap();\n        return;\n      }\n\n      if(changes&&changes.baseMap){\n        // this.baseLayer.setUrl(this.baseMap.urlTemplate || DEFAULT_BASE_MAP)\n        if(this.baseLayer){\n          this.baseLayer.setUrl(this.baseMap.urlTemplate || DEFAULT_BASE_MAP);\n          // this.baseLayer.removeFrom(this.map);\n        } else if(this.baseMap) {\n          this.createBaseLayer();\n          this.baseLayer.addTo(this.map).bringToBack();\n        }\n      }\n    });\n\n    // Update parameters\n  }\n\n  createBaseLayer(): void {\n    this.baseLayer = null;\n    if(!this.baseMap){\n      return;\n    }\n\n    const options: leaflet.TileLayerOptions = {};\n    if(this.baseMap.maxNativeZoom){\n      options.maxNativeZoom = this.baseMap.maxNativeZoom;\n    }\n\n    this.baseLayer = leaflet.tileLayer(this.baseMap.urlTemplate || DEFAULT_BASE_MAP,options);\n  }\n\n  createMap(): void {\n    setTimeout(()=>{\n      if(this.map){\n        this.map.remove();\n        this.map = null;\n      }\n\n      const theDiv = this.element.nativeElement as HTMLElement;\n      const theHost = theDiv.querySelector('.leafletHost');\n\n      // let baseLayers = R.mapObjIndexed(v=>{\n      //   return L.tileLayer(v,\n      //     { maxZoom: 18, attribution: '...' });\n      // },this.baseMaps);\n\n      // if(!this.baseMap || !baseLayers[this.baseMap]){\n      //   this.baseMap = Object.keys(this.baseMaps)[0];\n      // }\n\n      // let baseLayerArray = [baseLayers[this.baseMap]];\n      let crs = leaflet.CRS.EPSG3857;//:L.CRS.Simple;\n      // if(this.crs){\n      //   crs = L.CRS[this.crs];\n      // }\n\n      // let panes = 0;\n      // if(this.map){\n      //   panes = getCustomMapPanes(this.map).length;\n      // }\n      this.createBaseLayer();\n      const baseLayerArray = [\n      ];\n      if(this.baseLayer){\n        baseLayerArray.push(this.baseLayer);\n      }\n\n      this.map = leaflet.map(theHost as HTMLElement,{\n        crs,\n        zoom: 5,\n        minZoom: this.minZoom,\n        maxZoom: this.maxZoom,\n        zoomControl: this.zoomControl,\n        center: leaflet.latLng(-20, 135),\n        // zoom: this.zoom,\n        // minZoom: this.minZoom,\n        // maxZoom: this.maxZoom,\n        scrollWheelZoom: true,\n        layers:baseLayerArray,\n        continuousWorld: false,\n        noWrap: true,\n        tap: false,\n        // worldCopyJump:true\n            // attributionControl: this.attribution\n      } as leaflet.MapOptions);\n      this.svc.mapCreated(this.map);\n      // if(!this.pannable){\n      //   this.map.dragging.disable();\n      // }\n\n      // if(!this.zoomable){\n      //   this.map.touchZoom.disable();\n      //   this.map.doubleClickZoom.disable();\n      //   this.map.scrollWheelZoom.disable();\n      // }\n\n      // configureVectorPanes(panes,this.map);\n\n      // this._helper.register(this.map);\n      this.map.on('click',(evt: leaflet.LeafletMouseEvent)=>{\n        if(evt.originalEvent.defaultPrevented){\n          return;\n        }\n        // this.pointClick.emit(evt.latlng);\n      });\n      // this.creating=false;\n\n      // this.map.on('zoomend',()=>this.coordinatesChanged());\n      // this.map.on('moveend',()=>this.coordinatesChanged());\n\n      // if(this.showLayerControl){\n      //   this.layerControl = L.control.layers(baseLayers, [],{\n      //     hideSingleBase:true\n      //   }).addTo(this.map);\n      // }\n\n      // this.mapCreated.emit(this.map);\n\n\n\n      // this.markerLayers = [];\n      // this.setupMarkers();\n\n      this.setBounds();\n      this.initialised = true;\n    });\n\n  }\n\n  setBounds(): void {\n    if(!this.map||!this.bounds){\n      return;\n    }\n\n    this.map.fitBounds([\n      [this.bounds.south,this.bounds.west],\n      [this.bounds.north,this.bounds.east]\n    ]);\n  }\n\n}\n/*\nhttp://35.244.111.168:8080/wms\n?service=WMS\n&request=GetMap\n&layers=wcf\n&styles=\n&format=image%2Fpng\n&transparent=true\n&version=1.1.1\n&time=2019-01-01T00%3A00%3A00.000Z\n&width=256\n&height=256\n&srs=EPSG%3A3857\n&bbox=-17532819.79994059,-5009377.085697311,-15028131.257091936,-2504688.542848655\n\n*/\n","import { Component, OnInit, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport * as L from 'leaflet';\nimport 'leaflet-draw';\nimport { LeafletService } from './leaflet.service';\n\n@Component({\n  selector: 'draw',\n  template: '',\n  styles: []\n})\nexport class DrawComponent implements OnInit, OnDestroy {\n  @Output() featureClosed = new EventEmitter<any>();\n\n  private drawnItems: L.FeatureGroup;\n  private drawControl: L.Control.Draw;\n  private polygon: L.Draw.Polygon;\n\n  constructor(private map: LeafletService) { }\n\n  ngOnDestroy(): void {\n    this.map.withMap(m=>this.removeControl(m))\n  }\n\n  ngOnInit(): void {\n    this.map.withMap(m=>this.addControl(m))\n  }\n\n  removeControl(m: L.Map): void {\n    m.removeLayer(this.drawnItems);\n    this.polygon.removeHooks();\n    // m.removeControl(this.drawControl);\n    m.off(L.Draw.Event.DRAWSTART);\n    m.off(L.Draw.Event.CREATED);\n  }\n\n  addControl(m: L.Map): void {\n    this.drawnItems = new L.FeatureGroup();\n    m.addLayer(this.drawnItems);\n\n    // this.drawControl = new L.Control.Draw({\n    //   draw: {\n    //     polyline: false,\n    //     circle: false,\n    //     marker: false,\n    //     rectangle: false,\n    //     circlemarker: false\n    //   },\n    //   edit: null\n    // });\n    // m.addControl(this.drawControl);\n    this.initiateDrawing(m);\n\n    m.on(L.Draw.Event.DRAWSTART, (event) => {\n      this.drawnItems.clearLayers();\n    });\n\n    m.on(L.Draw.Event.DRAWVERTEX, (event) => {\n      this.drawnItems.clearLayers();\n    });\n\n    m.on(L.Draw.Event.CREATED, (event) => {\n      console.log(event);\n\n      const layer = event.layer;\n      this.drawnItems.clearLayers();\n      this.drawnItems.addLayer(layer);\n      this.featureClosed.emit(layer.toGeoJSON());\n      this.polygon.removeHooks();\n      this.initiateDrawing(m);\n    });\n  }\n\n  initiateDrawing(m: L.Map): void {\n    (L.Draw.Polygon.prototype as any)._onTouch = L.Util.falseFn;\n    this.polygon = new L.Draw.Polygon(m as L.DrawMap, {repeatMode: false});\n    this.polygon.addHooks();\n  }\n}\n\n\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport * as L from 'leaflet';\nimport 'leaflet.vectorgrid';\nimport { LeafletService } from './leaflet.service';\nimport { TiledSublayerDescriptor } from './data';\nimport { HttpClient } from '@angular/common/http';\nimport { ScaledStyle, StyleValue } from 'map-wald';\nimport { Feature } from 'geojson';\n\nconst STYLES = {\n  fillOpacity: 0.0,\n  weight: 1.0\n};\n\nexport enum PointMode {\n  default,\n  circle\n}\n\n@Component({\n  selector: 'geojson-layer',\n  template: '',\n  styles: ['']\n})\nexport class GeojsonLayerComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() url: string;\n  @Input() features: any;\n  // @Input() styles: any;\n  @Input() sublayers: TiledSublayerDescriptor[] = [];\n  @Input() pointMode:PointMode = PointMode.default;\n  @Input() style: {[key:string]:StyleValue} = {};\n  // @Input() idColumn = 'id';\n  @Output() featureSelected = new EventEmitter<any>();\n\n  private destroyed = false;\n  private selectedFeature: any;\n  private vectorLayer: L.GeoJSON;\n  // private data: any;\n\n  constructor(private http: HttpClient, private map: LeafletService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n    this.map.map.then(m => {\n      this.remove(m);\n    });\n  }\n\n  private remove(m: L.Map): void {\n    if (this.vectorLayer) {\n      this.vectorLayer.removeFrom(m);\n      this.vectorLayer = null;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.url) {\n      this.downloadLayer(changes.url.currentValue);\n    } else if(changes.features||changes.pointMode){\n      this.makeLayer();\n    }\n  }\n\n  downloadLayer(url:string): void {\n    this.http.get(this.url).subscribe((data: any) => {\n      if (url !== this.url) {\n        // out of date!\n        return;\n      }\n      this.features = data;\n\n      this.makeLayer();\n    });\n  }\n\n  makeLayer(): void {\n    this.map.map.then(m => {\n      this.remove(m);\n      if (this.destroyed) {\n        return;\n      }\n\n      const style = (f: any)=>{\n        const styles: {[key:string]:any} = Object.assign({},STYLES);\n        Object.keys(this.style).forEach(k=>{\n          const val = this.style[k];\n          if((val as ScaledStyle<any>).getStyleValue) {\n            styles[k] = (val as ScaledStyle<any>).getStyleValue(f);\n          } else {\n            styles[k] = val;\n          }\n        });\n        return styles;\n      };\n\n      const options:L.GeoJSONOptions = {\n        // interactive: true\n        style: style\n      };\n\n      if(this.pointMode===PointMode.circle){\n        options.pointToLayer = (feature, latlng) => {\n          let radius = 3;\n          if(this.style && this.style.radius) {\n            if((this.style.radius as ScaledStyle<number>).getStyleValue){\n              radius = (this.style.radius as ScaledStyle<number>).getStyleValue(feature);\n            } else {\n              radius = this.style.radius as number;\n            }\n          }\n          return L.circleMarker(latlng,{radius:radius});\n        };\n      }\n\n      this.vectorLayer = L.geoJSON(this.features, options);\n\n      this.vectorLayer.on('click' as any, (event) => {\n        if (this.selectedFeature) {\n          this.vectorLayer.resetStyle(this.selectedFeature);\n          // resetFeatureStyle(this.selectedFeature);\n        }\n        this.selectedFeature = event.layer;\n        this.selectedFeature.setStyle({\n          weight:5\n        });\n\n        this.featureSelected.emit(this.selectedFeature.feature);\n      });\n      this.vectorLayer.addTo(m);\n    });\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'legend',\n  template: `<div class=\"map-legend panel panel-group\">\n<ng-template #tooltipContent>\n  <span [innerHtml]=helpText></span>\n</ng-template>\n  <strong>{{title}} <span *ngIf=\"mapUnits\" [innerHTML]=\"'('+mapUnits+')'\"></span>\n        <span *ngIf=\"helpText\"\n              [ngbTooltip]=\"tooltipContent\"\n              [placement]=\"tooltipPlacement\"\n              container=\"body\">\n          <i class=\"fa fa-info-circle\"></i>\n        </span>\n  </strong>\n\n  <div *ngIf=\"!imageURL\">\n    <div style=\"display:table;line-height:15px\">\n      <div style=\"display:table-row;padding:0;\"\n          *ngFor=\"let colour of colours; let i=index\">\n        <div class=\"legend-colour\" [ngClass]=\"markerClasses[i]||markerClasses[0]||''\">\n          <i class=\"legend-entry\" [ngStyle]=\"{background:colour}\"></i>\n        </div>\n        <div class=\"legend-label\">\n          <span [innerHTML]=\"labels[i]\"></span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"imageURL\">\n    <img [src]=\"imageURL\">\n  </div>\n  <p *ngIf=\"attributionLink\">Source: <a [href]=\"attributionLink\">{{attribution || 'details'}}</a></p>\n  <p *ngIf=\"attribution&&!attributionLink\">Source: {{attribution}}</p>\n</div>\n`, styles: [`\n.map-legend{\n  display:block;\n  background: white;\n}\n\n.legend-colour{\n  display:table-cell;\n  padding:0px;\n}\n\n.legend-label{\n  display:table-cell;\n  padding:0px 4px 2px 2px;\n  font-size:10px;\n  vertical-align:middle;\n}\n\n.legend-entry {\n  float: left;\n  width: 15px !important;\n  height: 15px !important;\n}\n\n.legend-colour.circle i.legend-entry {\n  border-radius:7px;\n}\n`]\n})\nexport class LegendComponent implements OnInit {\n  @Input() colours: Array<string> = ['red', 'white', 'blue'];\n  @Input() labels: Array<string> = [];\n  @Input() markerClasses: string[] = [];\n  @Input() imageURL: string\n  @Input() title = 'the title';\n  @Input() mapUnits = '';\n  @Input() helpText: string;\n  @Input() tooltipPlacement = 'right';\n  @Input() attribution: string;\n  @Input() attributionLink: string;\n\n  generatedLabels: string[] = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\nexport function makeColour(r: number, g: number, b: number, a?: number): string {\n  a = (a === undefined) ? 1 : a;\n  return `rgb(${r},${g},${b},${a})`;\n}\n\n","/// <reference types=\"./leaflet.customcontrols\" />\n\nimport { Component, OnInit, ViewChild, Input, AfterViewInit, ElementRef } from '@angular/core';\nimport { LeafletService } from './leaflet.service';\nimport * as leaflet from 'leaflet';\n\ninterface SavedMapSettings {\n  pan: boolean;\n  zoom: boolean;\n}\n\nconst TAG_WHITE_LIST = ['INPUT', 'SELECT', 'OPTION'];\n\ninterface MapWithHandler{\n  _handlers: {\n    enable: ()=>void;\n    disable: ()=>void;\n  }[];\n}\n\n@Component({\n  selector: 'map-control',\n  template: `<div #mapControl class=\"map-control-content\"\n                  (touchstart)=\"ontouchstart($event)\"\n                  (mouseenter)=\"disableMapEvents($event)\"\n                  (mouseleave)=\"enableMapEvents($event)\"\n                  (click)=\"m($event)\"\n                  (dblclick)=\"m($event)\"\n                  (mousemove)=\"m($event)\"\n                  (mousedown)=\"m($event)\"\n                  (mouseup)=\"m($event)\">\n  <ng-content></ng-content>\n</div>\n`, styles: [`.map-control-content{\n  background: transparent;\n}\n`],\n})\nexport class MapControlComponent implements OnInit, AfterViewInit {\n  @ViewChild('mapControl', { static: false }) mapControl: Component;\n  @Input() position = 'TOP_RIGHT';\n  touchDevice = false;\n\n  constructor(private _el: ElementRef, private _map: LeafletService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    // this._wrapper.getNativeMap().then((m)=>{\n    let content: HTMLElement = this._el.nativeElement.querySelector('.map-control-content');\n\n    //   // If content of the map control is not already wrapped in a div, do it\n    //   // now.\n    if (content.nodeName !== \"DIV\") {\n      const controlDiv: HTMLElement = document.createElement('div');\n      controlDiv.appendChild(content);\n      content = controlDiv;\n    }\n\n    const CustomControl = leaflet.Control.extend({\n      onAdd: (map:leaflet.Map) => {\n        return content;\n      },\n\n      onRemove: (map:leaflet.Map) => {\n        // Nothing to do here\n      }\n    });\n\n    const makeCustomControl = (opts:any) => {\n      return new CustomControl(opts);\n    };\n\n    this._map.map.then(map => {\n      const c = makeCustomControl({\n        position: this.position.replace(/_/g,'').toLowerCase()\n      });\n      c.addTo(map);\n    });\n    //   (<any>m).controls[(<any>window).google.maps.ControlPosition[this.position]].push(content);\n    // });\n  }\n\n  ontouchstart(ev: TouchEvent): void {\n    this.touchDevice = true;\n    if(TAG_WHITE_LIST.indexOf((ev.target as any).tagName)>=0){\n      ev.stopPropagation();\n    }\n    this.enableMapEvents(null);\n  }\n\n  disableMapEvents(event:MouseEvent): void {\n    this.m(event);\n\n    if(this.touchDevice){\n      return;\n    }\n\n    this._map.map.then(m=>{\n      m.dragging.disable();\n      m.scrollWheelZoom.disable();\n\n      (m as any as MapWithHandler)._handlers.forEach(h=>h.disable());\n    });\n  }\n\n  enableMapEvents(event:MouseEvent): void {\n    if(event){\n      this.m(event);\n    }\n\n    this._map.map.then(m=>{\n      const options = {\n        pan:true,\n        zoom:true\n      };\n\n      if(options.pan){\n        m.dragging.enable();\n      }\n\n      if(options.zoom){\n        m.scrollWheelZoom.enable();\n      }\n\n      (m as any as MapWithHandler)._handlers.forEach(h=>h.enable());\n    });\n  }\n\n  m(event:MouseEvent){\n    event.stopPropagation();\n  }\n\n}\n","import { Component, Input, ViewChild, AfterViewInit, ElementRef, EventEmitter, Output } from '@angular/core';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport * as store from 'store';\n\nexport enum SplashCloseMode {\n  NotOpened,\n  Accepted,\n  Cancelled\n}\n\n@Component({\n  selector: 'one-time-splash',\n  template: `<ng-template #splashTemplate let-c=\"close\" let-d=\"dismiss\">\n  <div *ngIf=\"label\" class=\"modal-header\">\n    <h4 class=\"modal-title\">\n      {{label}}</h4>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"d('Cross click')\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"modal-footer\">\n    <label *ngIf=\"application\">\n      <input type=\"checkbox\" [(ngModel)]=\"doNotShow\" (ngModelChange)=\"doNotShowClicked()\">\n      &nbsp; {{hideMessage}}\n    </label>\n    <button autofocus type=\"button\" class=\"btn btn-secondary\" (click)=\"c('Close click')\">Close</button>\n  </div>\n  </ng-template>\n`,\n  styles: [``]\n})\nexport class OneTimeSplashComponent implements AfterViewInit  {\n  @ViewChild('splashTemplate',{static:false}) splashTemplate:any;\n  @Input() application:string;\n  @Input() label = 'About';\n  @Input() hideMessage = 'Understood, I don’t need to see this again';\n  @Input() klass: string;\n  @Input() showOnLaunch = true;\n  @Output() closed = new EventEmitter<SplashCloseMode>();\n  doNotShow: boolean;\n  current:NgbModalRef;\n\n  constructor(private modalService: NgbModal){\n\n  }\n\n  storageKey(): string {\n    if(!this.application){\n      return null;\n    }\n\n    return this.application  + '-splash-skip';\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(()=>{\n      const key = this.storageKey();\n      if(key){\n        this.doNotShow = store.get(key,false);\n      }\n\n      if(this.showOnLaunch){\n        this.defaultShow();\n      }\n    });\n  }\n\n  defaultShow(): void {\n    if(!this.doNotShow){\n      this.show();\n    } else {\n      this.closed.emit(SplashCloseMode.NotOpened);\n    }\n  }\n\n  show(): void {\n    this.current = this.modalService.open(this.splashTemplate,{\n      size:'lg',\n      windowClass:this.klass\n    });\n  }\n\n  close(): void {\n    if(!this.current){\n      this.closed.emit(SplashCloseMode.NotOpened);\n      return;\n    }\n\n    this.current.close();\n    this.current=null;\n    this.closed.emit(SplashCloseMode.Accepted);\n  }\n\n  doNotShowClicked(): void {\n    const key = this.storageKey();\n    if(!key){\n      return;\n    }\n\n    store.set(key,this.doNotShow);\n  }\n}\n","/// <reference types=\"./leaflet.vectorgrid\" />\n\nimport { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport * as leaflet from 'leaflet';\n// import 'leaflet.vectorgrid';\nimport { LeafletService } from './leaflet.service';\nimport { TiledSublayerDescriptor } from './data';\n\n@Component({\n  selector: 'vector-tile-layer',\n  template: '',\n  styles: []\n})\nexport class VectorTileLayerComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() url: string;\n  @Input() styles: any;\n  @Input() sublayers: TiledSublayerDescriptor[] = [];\n  @Output() featureSelected = new EventEmitter<any>();\n  @Input() minZoom = 0;\n  @Input() maxZoom = 30;\n  @Input() minNativeZoom = 11;\n  @Input() maxNativeZoom = 13;\n\n  private destroyed = false;\n  private selectedFeature: any;\n  private vectorLayer: L.VectorGridLayer;\n\n  constructor(private map: LeafletService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n    this.map.map.then(m=>{\n      this.remove(m);\n    });\n  }\n\n  private getFeatureId(f:any): string {\n    const match = this.sublayers.find(v=>f.properties[v.keyField]);\n    return f.properties[match.keyField];\n  }\n\n  private remove(m: L.Map): void {\n    if(this.vectorLayer){\n      this.vectorLayer.removeFrom(m);\n      this.vectorLayer = null;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.map.map.then(m=>{\n      this.remove(m);\n      if(this.destroyed){\n        return;\n      }\n\n      this.vectorLayer = L.vectorGrid.protobuf(this.url,{\n        minZoom:this.minZoom,\n        maxZoom:this.maxZoom,\n        minNativeZoom:this.minNativeZoom,\n        maxNativeZoom:this.maxNativeZoom,\n        interactive: true,\n        vectorTileLayerStyles: this.styles,\n        getFeatureId: (f:any) => this.getFeatureId(f)\n      });\n\n      this.vectorLayer.on('click' as any,(event)=>{\n        if(this.selectedFeature){\n          this.vectorLayer.resetFeatureStyle(this.selectedFeature);\n        }\n        this.selectedFeature = this.getFeatureId(event.layer);\n        this.vectorLayer.setFeatureStyle(this.selectedFeature, {\n          weight:5\n        });\n\n        const geoJSON = this.vectorGridFeatureToGeoJSON(event.layer);\n        this.featureSelected.emit(geoJSON);\n      });\n      this.vectorLayer.addTo(m);\n    });\n  }\n\n  vectorGridFeatureToGeoJSON(lyr:any):any{\n    const parts:any[][] = (lyr._parts[0]&&lyr._parts[0][0])?lyr._parts:[lyr._parts];\n    const points = (parts as any[]).map((part:any[])=>{\n      return part.map(pt=>([pt.x,pt.y] as number[]));\n    });\n    const originalXs = ([] as number[]).concat(...points.map(part=>part.map(pt=>pt[0])));\n    const minx = Math.min(...originalXs);//points[0].map(pt=>pt[0]));\n    const maxx = Math.max(...originalXs);//points[0].map(pt=>pt[0]));\n\n    const originalYs = ([] as number[]).concat(...points.map(part=>part.map(pt=>pt[1])));\n    const miny = Math.min(...originalYs);//points[0].map(pt=>pt[1]));\n    const maxy = Math.max(...originalYs);//points[0].map(pt=>pt[1]));\n\n    function converter(from:number[],to:number[]): ((c:number)=>number) {\n      const fromDelta = from[1]-from[0];\n      const toDelta = to[1] - to[0];\n      return (c)=>to[0] + ((c-from[0])/fromDelta) * toDelta;\n    }\n\n    const xConverter = converter([minx,maxx],[lyr.properties.minx,lyr.properties.maxx]);\n    const yConverter = converter([miny,maxy],[lyr.properties.maxy,lyr.properties.miny]);\n\n    return {\n      type:'Feature',\n      geometry:{\n        type:'Polygon',\n        coordinates:points.map(part=>part.map(pt=>[xConverter(pt[0]),yConverter(pt[1])]))\n      },\n      properties:lyr.properties\n    };\n  }\n\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { LeafletService } from './leaflet.service';\nimport * as L from 'leaflet';\n\nconst DEFAULT_WMS_PARAMS = {\n  format: 'image/png',\n  transparent: true\n};\n\n@Component({\n  selector: 'wms-layer',\n  template: '',\n  styles: []\n})\nexport class WmsLayerComponent implements OnInit, OnChanges {\n  @Input() url: string;\n  @Input() params: any = {};\n  private layer: L.TileLayer;\n\n  constructor(private map: LeafletService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.map.map.then(m=>{\n      if(this.layer){\n        this.layer.removeFrom(m);\n        this.layer = null;\n      }\n      if(!this.url||!this.params){\n        return;\n      }\n\n      const params = Object.assign({},DEFAULT_WMS_PARAMS,this.params);\n      this.layer = L.tileLayer.wms(this.url,params as L.WMSOptions);\n      // this.layer.options.noWrap = true;\n      this.layer.addTo(m);\n    });\n  }\n\n}\n","import { Component, Input, ViewChild, AfterViewInit, ElementRef, Output, EventEmitter } from '@angular/core';\n\n\ndeclare var Plotly: any;\n\n@Component({\n  selector: 'date-element',\n  template: `<div class=\"row no-gutters\">\n  <div class=\"col-4\">{{label}}</div>\n  <div class=\"col-2\">\n    <button class=\"btn btn-secondary btn-sm\"\n            (click)=\"move(-step)\"\n            [disabled]=\"disabled\">\n      <i class=\"fa fa-angle-left\"></i>\n    </button>\n  </div>\n  <div class=\"col-4\"><button class=\"btn btn-link btn-sm\">{{src[property]}}</button></div>\n  <div class=\"col-2\">\n    <button class=\"btn btn-secondary btn-sm\"\n            (click)=\"move(step)\"\n            [disabled]=\"disabled\">\n      <i class=\"fa fa-angle-right\"></i>\n    </button>\n  </div>\n</div>\n`,styles: []})\nexport class DateElementComponent implements AfterViewInit  {\n  @Input() label:string;\n  @Input() property:string;\n  @Input() src:any;\n  @Input() step = 1;\n  @Output() changed = new EventEmitter<any>();\n  @Input() disabled = false;\n\n  constructor(){\n\n  }\n\n  ngAfterViewInit(){\n\n  }\n\n  move(n:number){\n    this.src[this.property] += n;\n    this.changed.emit(this.src);\n  }\n}\n","import { Component, Input, ViewChild, AfterViewInit, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\nimport { TimeUtilsService, InterpolationService } from 'map-wald';\n\nconst MILLISECONDS_PER_DAY=24*60*60*1000;\n\ndeclare var Plotly: any;\n\n@Component({\n  selector: 'date-selection',\n  template: `<div class=\"date-control container-fluid\">\n  <div *ngIf=\"style!=='arrows'\" class=\"row no-gutters\">\n    <div class=\"col-12 form-group-inline\">\n        <div class=\"input-group input-group-sm\">\n          <div *ngIf=\"step\" class=\"ds-btn input-group-addon\" (click)=\"move(-stepDays)\">\n            <i class=\"fa fa-angle-left\"></i>\n          </div>\n          <input class=\"form-control form-control-sm\"\n                 placeholder=\"yyyy-mm-dd\"\n                 name=\"dp\"\n                 [(ngModel)]=\"dateStruct\"\n                 (ngModelChange)=\"dateStructChanged()\"\n                 ngbDatepicker\n                 #d=\"ngbDatepicker\"\n                 [maxDate]=\"maxDateStruct\"\n                 [minDate]=\"minDateStruct\"\n                 [disabled]=\"disabled\">\n          <div class=\"ds-btn input-group-addon\" (click)=\"disabled||d.toggle()\" >\n            <i class=\"fa fa-calendar\"></i>\n          </div>\n          <div *ngIf=\"step\" class=\"ds-btn input-group-addon\" (click)=\"move(stepDays)\">\n            <i class=\"fa fa-angle-right\"></i>\n          </div>\n        </div>\n      </div>\n\n    <!--\n      <div class=\"col-2\" >\n        <button class=\"btn btn-secondary btn-sm\" [disabled]=\"atMax\"\n                (click)=\"move(1)\"><i class=\"fa fa-chevron-right\"></i></button>\n      </div>\n    -->\n  </div>\n\n  <div *ngIf=\"style==='arrows'\">\n    <date-element *ngIf=\"need.day\"   [src]=\"dateStruct\" [property]=\"'day'\" [label]=\"'Day'\"\n                  [step]=\"stepDays\"\n                  (changed)=\"dateStructChanged()\"\n                  [disabled]=\"disabled\"></date-element>\n    <date-element *ngIf=\"need.month\" [src]=\"dateStruct\" [property]=\"'month'\" [label]=\"'Month'\"\n                  (changed)=\"dateStructChanged()\"\n                  [disabled]=\"disabled\"></date-element>\n    <date-element *ngIf=\"need.year\"  [src]=\"dateStruct\" [property]=\"'year'\" [label]=\"'Year'\"\n                  (changed)=\"dateStructChanged()\"\n                  [disabled]=\"disabled\"></date-element>\n  </div>\n</div>\n`,styles: [\n  `\n  .date-control.container-fluid {\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n\n  .ds-btn {\n    min-width:10px;\n    padding: 5px;\n  }\n  `\n]})\nexport class DateSelectionComponent implements AfterViewInit  {\n  @Input() date: Date;\n  @Output() dateChange = new EventEmitter();\n  @Input() timestep: string;\n  @Input() minDate: Date|string;\n  @Input() maxDate: Date|string;\n  @Input() style: ('popup'|'arrows') = 'arrows';\n  @Input() stepDays = 1;\n  @Input() referenceDate:string = null;\n  @Input() disabled = false;\n  @Input() step = false;\n\n  need = {\n    day:true,\n    month:true,\n    year:true\n  };\n\n  minDateStruct:NgbDateStruct;\n  maxDateStruct:NgbDateStruct;\n  dateStruct:NgbDateStruct;\n\n  atMax:boolean=false;\n  atMin:boolean=false;\n\n  constructor(private timeUtils: TimeUtilsService){\n\n  }\n\n  ngAfterViewInit(){\n\n  }\n\n  ngOnChanges(changes:any){\n    if(changes.minDate){\n      this.minDateStruct = this.timeUtils.convertDate(this.minDate);\n    }\n\n    if(changes.maxDate){\n      this.maxDateStruct = this.timeUtils.convertDate(this.maxDate);\n    }\n\n    if(changes.date){\n      this.dateStruct = this.timeUtils.convertDate(this.date);\n    }\n\n    if(changes.timestep){\n      this.assessDateComponents();\n    }\n    this.checkLimits();\n  }\n\n  dateStructChanged(){\n    this.date = new Date(Date.UTC(this.dateStruct.year,this.dateStruct.month-1,this.dateStruct.day));\n    // this.date.setUTCFullYear(this.dateStruct.year)\n    // this.date.setUTCMonth(this.dateStruct.month-1)\n    // this.date.setUTCDate(this.dateStruct.day);\n    this.checkReference();\n    this.dateChange.emit(this.date);\n  }\n\n  assessDateComponents(){\n    this.need.day = this.need.month = this.need.year = true;\n    if(this.timestep==='daily'){\n      return;\n    }\n    this.need.day = false;\n\n    if(this.timestep==='annual') {\n      this.need.month = false;\n    }\n  }\n\n  move(n:number){\n    this.date = new Date(this.date&&this.date.getTime());\n    this.date.setDate(this.date.getDate()+n);\n    this.onDateChanged();\n    this.dateChange.emit(this.date);\n  }\n\n  onDateChanged(){\n    this.checkLimits();\n  }\n\n  checkLimits(){\n    this.atMax = this.timeUtils.datesEqual(this.dateStruct,this.maxDateStruct);\n    this.atMin = this.timeUtils.datesEqual(this.dateStruct,this.minDateStruct);\n  }\n  // TODO not enforcing limits etc...\n\n  checkReference(): any {\n    if(!this.referenceDate){\n      return;\n    }\n\n    let refComponents = InterpolationService.interpolate(this.referenceDate,{\n      year:this.date.getFullYear(),\n      month:this.date.getMonth()+1,\n      date:this.date.getDate()\n    }).split('-').map(s=>+s);\n\n    let currentRef = new Date(Date.UTC(refComponents[0],refComponents[1]-1,refComponents[2]));\n\n    console.log('currentRef',currentRef);\n    console.log('currentDate',this.date);\n    let timeSpan = MILLISECONDS_PER_DAY * this.stepDays;\n\n    let days = (this.date.getTime() - currentRef.getTime())/timeSpan;\n    this.date = new Date(currentRef.getTime() + Math.round(days)*timeSpan);\n    this.dateStruct = this.timeUtils.convertDate(this.date);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { LatLng, LatLngBounds, LeafletEvent, LeafletMouseEvent } from 'leaflet';\nimport { LeafletService } from './leaflet.service';\n\n@Component({\n  selector: 'map-coordinates',\n  template: `\n  <div style=\"background-color:white\">\n    <p>Cursor: {{mouseCoordinates}}</p>\n    <p>Bounds: {{bounds | json}}</p>\n</div>\n`,\n  styles: []\n})\nexport class MapCoordinatesComponent implements OnInit {\n  mouseCoordinates: LatLng;\n  bounds: LatLngBounds;\n\n  constructor(private map: LeafletService) {\n    this.withMap(m=>{\n      const events = [\n        'resize',\n        'zoomend',\n        'moveend',\n        'mousemove'\n      ]\n      events.forEach(e=>{\n        m.on(e,(evt)=>this.mapChange(evt));\n      });\n\n      // const mouseEvents = [\n      //   'mousemove'\n      // ];\n      // mouseEvents.forEach(e=>{\n      //   m.on(e,(evt)=>this.mouseEvent(evt));\n      // })\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  withMap(fn:((m:L.Map)=>void)): void {\n    this.map.map.then(fn);\n  }\n\n  mapChange(evt:LeafletEvent): void {\n    if(evt.type==='mousemove'){\n      this.mouseCoordinates = (evt as LeafletMouseEvent).latlng;\n      return;\n    }\n\n    const map:L.Map = evt.target;\n    this.bounds = map.getBounds();\n    // console.log(evt);\n  }\n\n  // mouseEvent(evt:MouseEvent):void {\n\n  // }\n}\n","\n\nexport * from './basemap-descriptor';\nexport * from './vector-layer-descriptor';\n\n\n// export * from './display-settings';\n// export * from './layer-descriptor';\n// export * from './legend-response';\n// export * from './map-settings';\n\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MapWaldCoreModule } from 'map-wald';\n\nimport { LeafletService } from './leaflet.service';\nimport { LeafletMapComponent } from './leaflet-map.component';\nimport { DrawComponent } from './draw.component';\nimport { GeojsonLayerComponent } from './geojson-layer.component';\nimport { LegendComponent } from './legend.component';\nimport { MapControlComponent } from './map-control.component';\nimport { OneTimeSplashComponent } from './one-time-splash.component';\nimport { VectorTileLayerComponent } from './vector-tile-layer.component';\nimport { WmsLayerComponent } from './wms-layer.component';\nimport { DateElementComponent } from './date-element.component';\nimport { DateSelectionComponent } from './date-selection.component';\nimport { MapCoordinatesComponent } from './map-coordinates.component';\n\nexport * from './data';\nexport * from './leaflet.service';\nexport * from './leaflet-map.component';\nexport * from './draw.component';\nexport * from './geojson-layer.component';\nexport * from './legend.component';\nexport * from './map-control.component';\nexport * from './one-time-splash.component';\nexport * from './vector-tile-layer.component';\nexport * from './wms-layer.component';\nexport * from './date-element.component';\nexport * from './date-selection.component';\nexport * from './map-coordinates.component';\n\nconst components: any[] = [\n  //$componentList\n  DrawComponent,\n  GeojsonLayerComponent,\n  LeafletMapComponent,\n  LegendComponent,\n  MapControlComponent,\n  OneTimeSplashComponent,\n  VectorTileLayerComponent,\n  WmsLayerComponent,\n  DateElementComponent,\n  DateSelectionComponent,\n  MapCoordinatesComponent\n];\n\nconst services: any[] = [\n  //$serviceList\n  LeafletService  \n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    NgbModule,\n    MapWaldCoreModule\n  ],\n  declarations: components,\n  exports: components,\n  providers: services\n})\nexport class MapWaldLeafletModule {\n  static forRoot(moduleInitialisation:any): ModuleWithProviders<MapWaldLeafletModule> {\n    return {\n      ngModule: MapWaldLeafletModule,\n      providers: services\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}