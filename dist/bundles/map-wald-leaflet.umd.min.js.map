{"version":3,"sources":["ng://map-wald-leaflet/leaflet.service.ts","ng://map-wald-leaflet/leaflet-map.component.ts","ng://map-wald-leaflet/draw.component.ts","ng://map-wald-leaflet/geojson-layer.component.ts","ng://map-wald-leaflet/legend.component.ts","ng://map-wald-leaflet/map-control.component.ts","ng://map-wald-leaflet/one-time-splash.component.ts","ng://map-wald-leaflet/vector-tile-layer.component.ts","ng://map-wald-leaflet/wms-layer.component.ts","ng://map-wald-leaflet/data/index.ts","ng://map-wald-leaflet/index.ts","ng://map-wald-leaflet/map-wald-leaflet.ts"],"names":["LeafletService","_this","this","map","Promise","res","rej","resolve","reject","prototype","mapCreated","withMap","fn","then","factory","ɵfac","exports","DEFAULT_BASE_MAP","LeafletMapComponent","element","svc","zoomControl","minZoom","maxZoom","styles","initialised","console","log","ngOnChanges","changes","Object","keys","length","updateMap","bounds","setBounds","ngOnInit","setTimeout","baseMap","baseLayer","setUrl","urlTemplate","createBaseLayer","addTo","createMap","options","maxNativeZoom","leaflet","tileLayer","remove","theHost","nativeElement","querySelector","crs","CRS","EPSG3857","baseLayerArray","zoom","center","latLng","scrollWheelZoom","layers","continuousWorld","noWrap","on","evt","originalEvent","defaultPrevented","fitBounds","south","west","north","east","i0","ɵɵdirectiveInject","ElementRef","i1","selectors","inputs","features","ɵɵNgOnChangesFeature","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵstyleMap","DrawComponent","featureClosed","core_1","ngOnDestroy","m","removeControl","addControl","removeLayer","drawnItems","polygon","removeHooks","off","L","Draw","Event","DRAWSTART","CREATED","FeatureGroup","addLayer","initiateDrawing","event","clearLayers","DRAWVERTEX","layer","emit","toGeoJSON","Polygon","repeatMode","addHooks","outputs","encapsulation","STYLES","fillOpacity","weight","GeojsonLayerComponent","http","sublayers","featureSelected","destroyed","vectorLayer","removeFrom","url","get","subscribe","data","currentValue","geoJSON","style","selectedFeature","resetStyle","setStyle","feature","HttpClient","i2","ɵɵelement","ɵɵproperty","ctx_r1","helpText","ɵɵsanitizeHtml","ctx_r2","mapUnits","_r0","ctx_r3","tooltipPlacement","ɵɵadvance","ɵɵpureFunction1","colour_r9","ctx_r8","labels","i_r10","ɵɵtemplate","LegendComponent_div_7_div_2_Template","ctx_r4","colours","ctx_r5","imageURL","ɵɵsanitizeUrl","ɵɵtext","ctx_r6","attributionLink","ɵɵtextInterpolate","attribution","ɵɵtextInterpolate1","ctx_r7","LegendComponent","title","generatedLabels","LegendComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","LegendComponent_span_5_Template","LegendComponent_span_6_Template","LegendComponent_div_7_Template","LegendComponent_div_8_Template","LegendComponent_p_9_Template","LegendComponent_p_10_Template","makeColour","r","g","b","a","undefined","TAG_WHITE_LIST","MapControlComponent","_el","_map","position","touchDevice","ngAfterViewInit","content","nodeName","controlDiv","document","createElement","appendChild","CustomControl","Control","extend","onAdd","onRemove","opts","replace","toLowerCase","ontouchstart","ev","indexOf","target","tagName","stopPropagation","enableMapEvents","disableMapEvents","dragging","disable","enable","viewQuery","ɵɵlistener","$event","ɵɵrestoreView","_r8","d_r3","ɵɵnextContext","dismiss","label","_r10","doNotShow","doNotShowClicked","hideMessage","OneTimeSplashComponent_ng_template_0_div_0_Template","OneTimeSplashComponent_ng_template_0_label_4_Template","c_r2","close","application","SplashCloseMode","OneTimeSplashComponent","modalService","showOnLaunch","closed","storageKey","key","store","defaultShow","NotOpened","show","current","open","splashTemplate","size","windowClass","klass","Accepted","set","NgbModal","OneTimeSplashComponent_ng_template_0_Template","VectorTileLayerComponent","getFeatureId","f","match","find","v","properties","keyField","vectorGrid","protobuf","interactive","vectorTileLayerStyles","resetFeatureStyle","setFeatureStyle","vectorGridFeatureToGeoJSON","lyr","points","_parts","part","pt","x","y","minx","Math","min","apply","__spread","maxx","max","miny","maxy","converter","from","to","fromDelta","toDelta","c","xConverter","yConverter","type","geometry","coordinates","DEFAULT_WMS_PARAMS","format","transparent","WmsLayerComponent","params","assign","wms","__exportStar","basemapDescriptor","vectorLayerDescriptor","leaflet_service","leafletMap_component","draw_component","geojsonLayer_component","legend_component","mapControl_component","oneTimeSplash_component","vectorTileLayer_component","wmsLayer_component","draw_component_1","geojson_layer_component_1","leaflet_map_component_1","legend_component_1","map_control_component_1","one_time_splash_component_1","vector_tile_layer_component_1","wms_layer_component_1","services","leaflet_service_1","MapWaldLeafletModule","forRoot","moduleInitialisation","ngModule","providers","imports","common_1","forms_1","http_1","ng_bootstrap_1","map_wald_1","declarations","esm5"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport * as leaflet from 'leaflet';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class LeafletService {\n  map: Promise<leaflet.Map>;\n  private resolve: ((x: leaflet.Map)=>void);\n  private reject: ((x: any)=>void);\n\n  constructor() {\n    this.map = new Promise<leaflet.Map>((res,rej)=>{\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  mapCreated(map: leaflet.Map): void {\n    this.resolve(map);\n  }\n\n  withMap(fn:((m:L.Map)=>void)): void {\n    this.map.then(fn);\n  }\n}\n","import { Component, OnInit, OnChanges, SimpleChanges, ElementRef, Input } from '@angular/core';\nimport * as leaflet from 'leaflet';\nimport { LeafletService } from './leaflet.service';\nimport { Bounds } from 'map-wald';\nimport { BasemapDescriptor } from './data';\n\nconst DEFAULT_BASE_MAP='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n@Component({\n  selector: 'leaflet-map',\n  template: `<div class=\"leafletHost\" [style]=\"styles\">\n  <ng-content></ng-content>\n</div>\n`,styles: [\n  `\n  .leafletHost{\n    width:100%;\n    min-height:400px;\n  }`\n]\n})\nexport class LeafletMapComponent implements OnInit, OnChanges {\n  @Input() bounds: Bounds;\n  @Input() baseMap: BasemapDescriptor;\n  @Input() zoomControl = true;\n  @Input() minZoom = 5;\n  @Input() maxZoom = 32;\n\n  map: leaflet.Map;\n  styles: any = {};\n  initialised = false;\n\n  // Leaflet.TileLayer\n  private baseLayer: leaflet.TileLayer;\n\n  constructor(private element: ElementRef, private svc: LeafletService) {\n    console.log('LeafletMapComponent');\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if(!this.initialised){\n      return;\n    }\n\n    const changeCount = Object.keys(changes).length;\n\n    // if(this.creating){\n    //   return;\n    // }\n\n    // if(this.map){\n    //   if(changes.markers){\n    //     this.setupMarkers();\n\n    //     if(changeCount===1){\n    //       return;\n    //     }\n    //   }\n    //   this.map.remove();\n    // }\n\n//    if(!this.creating){\n    this.updateMap(changes);\n//    }\n\n    if(changes.bounds){\n      this.setBounds();\n    }\n  }\n\n  ngOnInit(): void {\n    this.updateMap();\n    this.setBounds();\n  }\n\n  updateMap(changes?: SimpleChanges): void {\n    setTimeout(()=>{\n      if(!this.map){\n        this.createMap();\n        return;\n      }\n\n      if(changes&&changes.baseMap){\n        // this.baseLayer.setUrl(this.baseMap.urlTemplate || DEFAULT_BASE_MAP)\n        if(this.baseLayer){\n          this.baseLayer.setUrl(this.baseMap.urlTemplate || DEFAULT_BASE_MAP);\n          // this.baseLayer.removeFrom(this.map);\n        } else {\n          this.createBaseLayer();\n          this.baseLayer.addTo(this.map);\n        }\n      }\n    });\n\n    // Update parameters\n  }\n\n  createBaseLayer(): void {\n    const options: leaflet.TileLayerOptions = {};\n    if(this.baseMap.maxNativeZoom){\n      options.maxNativeZoom = this.baseMap.maxNativeZoom;\n    }\n\n    this.baseLayer = leaflet.tileLayer(this.baseMap.urlTemplate || DEFAULT_BASE_MAP,options);\n  }\n\n  createMap(): void {\n    setTimeout(()=>{\n      if(this.map){\n        this.map.remove();\n        this.map = null;\n      }\n\n      const theDiv = this.element.nativeElement as HTMLElement;\n      const theHost = theDiv.querySelector('.leafletHost');\n\n      // let baseLayers = R.mapObjIndexed(v=>{\n      //   return L.tileLayer(v,\n      //     { maxZoom: 18, attribution: '...' });\n      // },this.baseMaps);\n\n      // if(!this.baseMap || !baseLayers[this.baseMap]){\n      //   this.baseMap = Object.keys(this.baseMaps)[0];\n      // }\n\n      // let baseLayerArray = [baseLayers[this.baseMap]];\n      let crs = leaflet.CRS.EPSG3857;//:L.CRS.Simple;\n      // if(this.crs){\n      //   crs = L.CRS[this.crs];\n      // }\n\n      // let panes = 0;\n      // if(this.map){\n      //   panes = getCustomMapPanes(this.map).length;\n      // }\n      this.createBaseLayer();\n      const baseLayerArray = [\n        this.baseLayer\n      ];\n\n      this.map = leaflet.map(theHost as HTMLElement,{\n        crs,\n        zoom: 5,\n        minZoom: this.minZoom,\n        maxZoom: this.maxZoom,\n        zoomControl: this.zoomControl,\n        center: leaflet.latLng(-20, 135),\n        // zoom: this.zoom,\n        // minZoom: this.minZoom,\n        // maxZoom: this.maxZoom,\n        scrollWheelZoom: true,\n        layers:baseLayerArray,\n        continuousWorld: false,\n        noWrap: true\n            // attributionControl: this.attribution\n      } as leaflet.MapOptions);\n      this.svc.mapCreated(this.map);\n      // if(!this.pannable){\n      //   this.map.dragging.disable();\n      // }\n\n      // if(!this.zoomable){\n      //   this.map.touchZoom.disable();\n      //   this.map.doubleClickZoom.disable();\n      //   this.map.scrollWheelZoom.disable();\n      // }\n\n      // configureVectorPanes(panes,this.map);\n\n      // this._helper.register(this.map);\n      this.map.on('click',(evt: leaflet.LeafletMouseEvent)=>{\n        if(evt.originalEvent.defaultPrevented){\n          return;\n        }\n        // this.pointClick.emit(evt.latlng);\n      });\n      // this.creating=false;\n\n      // this.map.on('zoomend',()=>this.coordinatesChanged());\n      // this.map.on('moveend',()=>this.coordinatesChanged());\n\n      // if(this.showLayerControl){\n      //   this.layerControl = L.control.layers(baseLayers, [],{\n      //     hideSingleBase:true\n      //   }).addTo(this.map);\n      // }\n\n      // this.mapCreated.emit(this.map);\n\n\n\n      // this.markerLayers = [];\n      // this.setupMarkers();\n\n      this.setBounds();\n      this.initialised = true;\n    });\n\n  }\n\n  setBounds(): void {\n    if(!this.map||!this.bounds){\n      return;\n    }\n\n    this.map.fitBounds([\n      [this.bounds.south,this.bounds.west],\n      [this.bounds.north,this.bounds.east]\n    ]);\n  }\n\n}\n/*\nhttp://35.244.111.168:8080/wms\n?service=WMS\n&request=GetMap\n&layers=wcf\n&styles=\n&format=image%2Fpng\n&transparent=true\n&version=1.1.1\n&time=2019-01-01T00%3A00%3A00.000Z\n&width=256\n&height=256\n&srs=EPSG%3A3857\n&bbox=-17532819.79994059,-5009377.085697311,-15028131.257091936,-2504688.542848655\n\n*/\n","import { Component, OnInit, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport * as L from 'leaflet';\nimport 'leaflet-draw';\nimport { LeafletService } from './leaflet.service';\n\n@Component({\n  selector: 'draw',\n  template: '',\n  styles: []\n})\nexport class DrawComponent implements OnInit, OnDestroy {\n  @Output() featureClosed = new EventEmitter<any>();\n\n  private drawnItems: L.FeatureGroup;\n  private drawControl: L.Control.Draw;\n  private polygon: L.Draw.Polygon;\n\n  constructor(private map: LeafletService) { }\n\n  ngOnDestroy(): void {\n    this.map.withMap(m=>this.removeControl(m))\n  }\n\n  ngOnInit(): void {\n    this.map.withMap(m=>this.addControl(m))\n  }\n\n  removeControl(m: L.Map): void {\n    m.removeLayer(this.drawnItems);\n    this.polygon.removeHooks();\n    // m.removeControl(this.drawControl);\n    m.off(L.Draw.Event.DRAWSTART);\n    m.off(L.Draw.Event.CREATED);\n  }\n\n  addControl(m: L.Map): void {\n    this.drawnItems = new L.FeatureGroup();\n    m.addLayer(this.drawnItems);\n\n    // this.drawControl = new L.Control.Draw({\n    //   draw: {\n    //     polyline: false,\n    //     circle: false,\n    //     marker: false,\n    //     rectangle: false,\n    //     circlemarker: false\n    //   },\n    //   edit: null\n    // });\n    // m.addControl(this.drawControl);\n    this.initiateDrawing(m);\n\n    m.on(L.Draw.Event.DRAWSTART, (event) => {\n      this.drawnItems.clearLayers();\n    });\n\n    m.on(L.Draw.Event.DRAWVERTEX, (event) => {\n      this.drawnItems.clearLayers();\n    });\n\n    m.on(L.Draw.Event.CREATED, (event) => {\n      console.log(event);\n\n      const layer = event.layer;\n      this.drawnItems.clearLayers();\n      this.drawnItems.addLayer(layer);\n      this.featureClosed.emit(layer.toGeoJSON());\n      this.polygon.removeHooks();\n      this.initiateDrawing(m);\n    });\n  }\n\n  initiateDrawing(m: L.Map): void {\n    this.polygon = new L.Draw.Polygon(m as L.DrawMap, {repeatMode: false});\n    this.polygon.addHooks();\n  }\n}\n\n\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport * as L from 'leaflet';\nimport 'leaflet.vectorgrid';\nimport { LeafletService } from './leaflet.service';\nimport { TiledSublayerDescriptor } from './data';\nimport { HttpClient } from '@angular/common/http';\n\nconst STYLES = {\n  fillOpacity: 0.0,\n  weight: 1.0\n};\n\n@Component({\n  selector: 'geojson-layer',\n  template: '',\n  styles: ['']\n})\nexport class GeojsonLayerComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() url: string;\n  @Input() styles: any;\n  @Input() sublayers: TiledSublayerDescriptor[] = [];\n  // @Input() idColumn = 'id';\n  @Output() featureSelected = new EventEmitter<any>();\n\n  private destroyed = false;\n  private selectedFeature: any;\n  private vectorLayer: L.GeoJSON;\n  // private data: any;\n\n  constructor(private http: HttpClient, private map: LeafletService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n    this.map.map.then(m => {\n      this.remove(m);\n    });\n  }\n\n  private remove(m: L.Map): void {\n    if (this.vectorLayer) {\n      this.vectorLayer.removeFrom(m);\n      this.vectorLayer = null;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.url) {\n      this.http.get(this.url).subscribe((data: any) => {\n        if (changes.url.currentValue !== this.url) {\n          // out of date!\n          return;\n        }\n\n        this.map.map.then(m => {\n          this.remove(m);\n          if (this.destroyed) {\n            return;\n          }\n\n          this.vectorLayer = L.geoJSON(data, {\n            // interactive: true\n            style: STYLES\n          });\n\n          this.vectorLayer.on('click' as any, (event) => {\n            if (this.selectedFeature) {\n              this.vectorLayer.resetStyle(this.selectedFeature);\n              // resetFeatureStyle(this.selectedFeature);\n            }\n            this.selectedFeature = event.layer;\n            this.selectedFeature.setStyle({\n              weight:5\n            });\n\n            this.featureSelected.emit(this.selectedFeature.feature);\n          });\n          this.vectorLayer.addTo(m);\n        });\n      });\n    }\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-legend',\n  template: `<div class=\"map-legend panel panel-group\">\n<ng-template #tooltipContent>\n  <span [innerHtml]=helpText></span>\n</ng-template>\n  <strong>{{title}} <span *ngIf=\"mapUnits\" [innerHTML]=\"'('+mapUnits+')'\"></span>\n        <span *ngIf=\"helpText\"\n              [ngbTooltip]=\"tooltipContent\"\n              [placement]=\"tooltipPlacement\"\n              container=\"body\">\n          <i class=\"fa fa-info-circle\"></i>\n        </span>\n  </strong>\n\n  <div *ngIf=\"!imageURL\">\n    <div style=\"display:table;line-height:15px\">\n      <div style=\"display:table-row;padding:0;\"\n          *ngFor=\"let colour of colours; let i=index\">\n        <div class=\"legend-colour\">\n          <i class=\"legend-entry\" [ngStyle]=\"{background:colour}\"></i>\n        </div>\n        <div class=\"legend-label\">\n          <span [innerHTML]=\"labels[i]\"></span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"imageURL\">\n    <img [src]=\"imageURL\">\n  </div>\n  <p *ngIf=\"attributionLink\">Source: <a [href]=\"attributionLink\">{{attribution || 'details'}}</a></p>\n  <p *ngIf=\"attribution&&!attributionLink\">Source: {{attribution}}</p>\n</div>\n`, styles: [`\n.map-legend{\n  display:block;\n  background: white;\n}\n\n.legend-colour{\n  display:table-cell;\n  padding:0px;\n}\n\n.legend-label{\n  display:table-cell;\n  padding:0px 4px 2px 2px;\n  font-size:10px;\n  vertical-align:middle;\n}\n\n.legend-entry {\n  float: left;\n  width: 15px !important;\n  height: 15px !important;\n}\n`]\n})\nexport class LegendComponent implements OnInit {\n  @Input() colours: Array<string> = ['red', 'white', 'blue'];\n  @Input() labels: Array<string> = [];\n\n  @Input() imageURL: string\n  @Input() title = 'the title';\n  @Input() mapUnits = '';\n  @Input() helpText: string;\n  @Input() tooltipPlacement = 'right';\n  @Input() attribution: string;\n  @Input() attributionLink: string;\n\n  generatedLabels: string[] = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\nexport function makeColour(r: number, g: number, b: number, a?: number): string {\n  a = (a === undefined) ? 1 : a;\n  return `rgb(${r},${g},${b},${a})`;\n}\n\n","/// <reference types=\"./leaflet.customcontrols\" />\n\nimport { Component, OnInit, ViewChild, Input, AfterViewInit, ElementRef } from '@angular/core';\nimport { LeafletService } from './leaflet.service';\nimport * as leaflet from 'leaflet';\n\ninterface SavedMapSettings {\n  pan: boolean;\n  zoom: boolean;\n}\n\nconst TAG_WHITE_LIST = ['INPUT', 'SELECT', 'OPTION'];\n\n@Component({\n  selector: 'map-control',\n  template: `<div #mapControl class=\"map-control-content\"\n                  (touchstart)=\"ontouchstart($event)\"\n                  (mouseenter)=\"disableMapEvents()\"\n                  (mouseleave)=\"enableMapEvents()\">\n  <ng-content></ng-content>\n</div>\n`, styles: [`.map-control-content{\n  background: transparent;\n}\n`],\n})\nexport class MapControlComponent implements OnInit, AfterViewInit {\n  @ViewChild('mapControl', { static: false }) mapControl: Component;\n  @Input() position = 'TOP_RIGHT';\n  touchDevice = false;\n\n  constructor(private _el: ElementRef, private _map: LeafletService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    // this._wrapper.getNativeMap().then((m)=>{\n    let content: HTMLElement = this._el.nativeElement.querySelector('.map-control-content');\n\n    //   // If content of the map control is not already wrapped in a div, do it\n    //   // now.\n    if (content.nodeName !== \"DIV\") {\n      const controlDiv: HTMLElement = document.createElement('div');\n      controlDiv.appendChild(content);\n      content = controlDiv;\n    }\n\n    const CustomControl = leaflet.Control.extend({\n      onAdd: (map:leaflet.Map) => {\n        return content;\n      },\n\n      onRemove: (map:leaflet.Map) => {\n        // Nothing to do here\n      }\n    });\n\n    const makeCustomControl = (opts:any) => {\n      return new CustomControl(opts);\n    };\n\n    this._map.map.then(map => {\n      const c = makeCustomControl({\n        position: this.position.replace(/_/g,'').toLowerCase()\n      });\n      c.addTo(map);\n    });\n    //   (<any>m).controls[(<any>window).google.maps.ControlPosition[this.position]].push(content);\n    // });\n  }\n\n  ontouchstart(ev: TouchEvent): void {\n    this.touchDevice = true;\n    if(TAG_WHITE_LIST.indexOf((ev.target as any).tagName)>=0){\n      ev.stopPropagation();\n    }\n    this.enableMapEvents();\n  }\n\n  disableMapEvents(): void {\n    if(this.touchDevice){\n      return;\n    }\n\n    this._map.map.then(m=>{\n      m.dragging.disable();\n      m.scrollWheelZoom.disable();\n    });\n  }\n\n  enableMapEvents(): void {\n    this._map.map.then(m=>{\n      const options = {\n        pan:true,\n        zoom:true\n      };\n\n      if(options.pan){\n        m.dragging.enable();\n      }\n\n      if(options.zoom){\n        m.scrollWheelZoom.enable();\n      }\n    });\n  }\n\n}\n","import { Component, Input, ViewChild, AfterViewInit, ElementRef, EventEmitter, Output } from '@angular/core';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport * as store from 'store';\n\nexport enum SplashCloseMode {\n  NotOpened,\n  Accepted,\n  Cancelled\n}\n\n@Component({\n  selector: 'one-time-splash',\n  template: `<ng-template #splashTemplate let-c=\"close\" let-d=\"dismiss\">\n  <div *ngIf=\"label\" class=\"modal-header\">\n    <h4 class=\"modal-title\">\n      {{label}}</h4>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"d('Cross click')\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"modal-footer\">\n    <label *ngIf=\"application\">\n      <input type=\"checkbox\" [(ngModel)]=\"doNotShow\" (ngModelChange)=\"doNotShowClicked()\">\n      &nbsp; {{hideMessage}}\n    </label>\n    <button autofocus type=\"button\" class=\"btn btn-secondary\" (click)=\"c('Close click')\">Close</button>\n  </div>\n  </ng-template>\n`,\n  styles: [``]\n})\nexport class OneTimeSplashComponent implements AfterViewInit  {\n  @ViewChild('splashTemplate',{static:false}) splashTemplate:any;\n  @Input() application:string;\n  @Input() label = 'About';\n  @Input() hideMessage = 'Understood, I donât need to see this again';\n  @Input() klass: string;\n  @Input() showOnLaunch = true;\n  @Output() closed = new EventEmitter<SplashCloseMode>();\n  doNotShow: boolean;\n  current:NgbModalRef;\n\n  constructor(private modalService: NgbModal){\n\n  }\n\n  storageKey(): string {\n    if(!this.application){\n      return null;\n    }\n\n    return this.application  + '-splash-skip';\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(()=>{\n      const key = this.storageKey();\n      if(key){\n        this.doNotShow = store.get(key,false);\n      }\n\n      if(this.showOnLaunch){\n        this.defaultShow();\n      }\n    });\n  }\n\n  defaultShow(): void {\n    if(!this.doNotShow){\n      this.show();\n    } else {\n      this.closed.emit(SplashCloseMode.NotOpened);\n    }\n  }\n\n  show(): void {\n    this.current = this.modalService.open(this.splashTemplate,{\n      size:'lg',\n      windowClass:this.klass\n    });\n  }\n\n  close(): void {\n    if(!this.current){\n      this.closed.emit(SplashCloseMode.NotOpened);\n      return;\n    }\n\n    this.current.close();\n    this.current=null;\n    this.closed.emit(SplashCloseMode.Accepted);\n  }\n\n  doNotShowClicked(): void {\n    const key = this.storageKey();\n    if(!key){\n      return;\n    }\n\n    store.set(key,this.doNotShow);\n  }\n}\n","/// <reference types=\"./leaflet.vectorgrid\" />\n\nimport { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport * as leaflet from 'leaflet';\n// import 'leaflet.vectorgrid';\nimport { LeafletService } from './leaflet.service';\nimport { TiledSublayerDescriptor } from './data';\n\n@Component({\n  selector: 'vector-tile-layer',\n  template: '',\n  styles: []\n})\nexport class VectorTileLayerComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() url: string;\n  @Input() styles: any;\n  @Input() sublayers: TiledSublayerDescriptor[] = [];\n  @Output() featureSelected = new EventEmitter<any>();\n\n  private destroyed = false;\n  private selectedFeature: any;\n  private vectorLayer: L.VectorGridLayer;\n\n  constructor(private map: LeafletService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n    this.map.map.then(m=>{\n      this.remove(m);\n    });\n  }\n\n  private getFeatureId(f:any): string {\n    const match = this.sublayers.find(v=>f.properties[v.keyField]);\n    return f.properties[match.keyField];\n  }\n\n  private remove(m: L.Map): void {\n    if(this.vectorLayer){\n      this.vectorLayer.removeFrom(m);\n      this.vectorLayer = null;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.map.map.then(m=>{\n      this.remove(m);\n      if(this.destroyed){\n        return;\n      }\n\n      this.vectorLayer = L.vectorGrid.protobuf(this.url,{\n        minZoom:11,\n        interactive: true,\n        vectorTileLayerStyles: this.styles,\n        maxNativeZoom:13,\n        getFeatureId: (f:any) => this.getFeatureId(f)\n      });\n\n      this.vectorLayer.on('click' as any,(event)=>{\n        if(this.selectedFeature){\n          this.vectorLayer.resetFeatureStyle(this.selectedFeature);\n        }\n        this.selectedFeature = this.getFeatureId(event.layer);\n        this.vectorLayer.setFeatureStyle(this.selectedFeature, {\n          weight:5\n        });\n\n        const geoJSON = this.vectorGridFeatureToGeoJSON(event.layer);\n        this.featureSelected.emit(geoJSON);\n      });\n      this.vectorLayer.addTo(m);\n    });\n  }\n\n  vectorGridFeatureToGeoJSON(lyr:any):any{\n    const parts:any[][] = (lyr._parts[0]&&lyr._parts[0][0])?lyr._parts:[lyr._parts];\n    const points = (parts as any[]).map((part:any[])=>{\n      return part.map(pt=>([pt.x,pt.y] as number[]));\n    });\n    const minx = Math.min(...points[0].map(pt=>pt[0]));\n    const maxx = Math.max(...points[0].map(pt=>pt[0]));\n\n    const miny = Math.min(...points[0].map(pt=>pt[1]));\n    const maxy = Math.max(...points[0].map(pt=>pt[1]));\n\n    function converter(from:number[],to:number[]): ((c:number)=>number) {\n      const fromDelta = from[1]-from[0];\n      const toDelta = to[1] - to[0];\n      return (c)=>to[0] + ((c-from[0])/fromDelta) * toDelta;\n    }\n\n    const xConverter = converter([minx,maxx],[lyr.properties.minx,lyr.properties.maxx]);\n    const yConverter = converter([miny,maxy],[lyr.properties.maxy,lyr.properties.miny]);\n\n    return {\n      type:'Feature',\n      geometry:{\n        type:'Polygon',\n        coordinates:points.map(part=>part.map(pt=>[xConverter(pt[0]),yConverter(pt[1])]))\n      },\n      properties:lyr.properties\n    };\n  }\n\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { LeafletService } from './leaflet.service';\nimport * as L from 'leaflet';\n\nconst DEFAULT_WMS_PARAMS = {\n  format: 'image/png',\n  transparent: true\n};\n\n@Component({\n  selector: 'wms-layer',\n  template: '',\n  styles: []\n})\nexport class WmsLayerComponent implements OnInit, OnChanges {\n  @Input() url: string;\n  @Input() params: any = {};\n  private layer: L.TileLayer;\n\n  constructor(private map: LeafletService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.map.map.then(m=>{\n      if(this.layer){\n        this.layer.removeFrom(m);\n        this.layer = null;\n      }\n      if(!this.url||!this.params){\n        return;\n      }\n\n      const params = Object.assign({},DEFAULT_WMS_PARAMS,this.params);\n      this.layer = L.tileLayer.wms(this.url,params as L.WMSOptions);\n\n      this.layer.addTo(m);\n    });\n  }\n\n}\n","\n\nexport * from './basemap-descriptor';\nexport * from './vector-layer-descriptor';\n\n\n// export * from './display-settings';\n// export * from './layer-descriptor';\n// export * from './legend-response';\n// export * from './map-settings';\n\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MapWaldCoreModule } from 'map-wald';\n\nimport { LeafletService } from './leaflet.service';\nimport { LeafletMapComponent } from './leaflet-map.component';\nimport { DrawComponent } from './draw.component';\nimport { GeojsonLayerComponent } from './geojson-layer.component';\nimport { LegendComponent } from './legend.component';\nimport { MapControlComponent } from './map-control.component';\nimport { OneTimeSplashComponent } from './one-time-splash.component';\nimport { VectorTileLayerComponent } from './vector-tile-layer.component';\nimport { WmsLayerComponent } from './wms-layer.component';\n\nexport * from './data';\nexport * from './leaflet.service';\nexport * from './leaflet-map.component';\nexport * from './draw.component';\nexport * from './geojson-layer.component';\nexport * from './legend.component';\nexport * from './map-control.component';\nexport * from './one-time-splash.component';\nexport * from './vector-tile-layer.component';\nexport * from './wms-layer.component';\n\nconst components: any[] = [\n  //$componentList\n  DrawComponent,\n  GeojsonLayerComponent,\n  LeafletMapComponent,\n  LegendComponent,\n  MapControlComponent,\n  OneTimeSplashComponent,\n  VectorTileLayerComponent,\n  WmsLayerComponent\n];\n\nconst services: any[] = [\n  //$serviceList\n  LeafletService  \n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    NgbModule,\n    MapWaldCoreModule\n  ],\n  declarations: components,\n  exports: components,\n  providers: services\n})\nexport class MapWaldLeafletModule {\n  static forRoot(moduleInitialisation:any): ModuleWithProviders<MapWaldLeafletModule> {\n    return {\n      ngModule: MapWaldLeafletModule,\n      providers: services\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}